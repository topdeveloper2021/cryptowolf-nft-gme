{
  "address": "0x5666349671AE8Fb980d3Cf4F03F805aF408Fb51a",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "strict",
          "type": "bool"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Return[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfbab97b6bf77151dc9e021342b1e576a653de88d454ee3bf98b84aa3131590c1",
  "receipt": {
    "to": null,
    "from": "0x759a1040B2bc2220f8ef16aC12E4B6A18d3d2DF7",
    "contractAddress": "0x5666349671AE8Fb980d3Cf4F03F805aF408Fb51a",
    "transactionIndex": 2,
    "gasUsed": "401838",
    "logsBloom": "0x
    "blockHash": "0x1f2b836fa70bd8cd051a92e4c1581937747df7ae5877385c8a1cb27922ccc1bc",
    "transactionHash": "0xfbab97b6bf77151dc9e021342b1e576a653de88d454ee3bf98b84aa3131590c1",
    "logs": [],
    "blockNumber": 15149802,
    "cumulativeGasUsed": "589929",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "307b9b62735aec3cdfac2737ec5a5f6e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"strict\",\"type\":\"bool\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Return[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>Bogdan Dumitru <bogdan@bowd.io>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Multicall.sol\":{\"content\":\"/**\\n *Submitted for verification at BscScan.com on 2021-01-23\\n*/\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title Multicall - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n/// @author Bogdan Dumitru <bogdan@bowd.io>\\n\\ncontract Multicall {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n    struct Return {\\n      bool success;\\n      bytes data;\\n\\n    }\\n    function aggregate(Call[] memory calls, bool strict) public returns (uint256 blockNumber, Return[] memory returnData) {\\n        blockNumber = block.number;\\n        returnData = new Return[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n            if (strict) {\\n              require(success);\\n            }\\n            returnData[i] = Return(success, ret);\\n        }\\n    }\\n    // Helper functions\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n        difficulty = block.difficulty;\\n    }\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n}\",\"keccak256\":\"0x4c493479e8824238f1b7ed9ffb6ca4dc7f40dee7dedd118e9b25fe6ecf128cce\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061064f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100e657806386d516e8146100ec578063a8b0574e146100f2578063ee82ac5e1461010057600080fd5b80630f28c97d1461008d57806317352e13146100a257806327e86d6e146100c35780634d2301cc146100cb575b600080fd5b425b6040519081526020015b60405180910390f35b6100b56100b0366004610332565b610112565b6040516100999291906104ce565b61008f610283565b61008f6100d9366004610564565b6001600160a01b03163190565b4461008f565b4561008f565b604051418152602001610099565b61008f61010e366004610586565b4090565b8151439060609067ffffffffffffffff81111561013157610131610296565b60405190808252806020026020018201604052801561017757816020015b60408051808201909152600081526060602082015281526020019060019003908161014f5790505b50905060005b845181101561027b5760008086838151811061019b5761019b61059f565b6020026020010151600001516001600160a01b03168784815181106101c2576101c261059f565b6020026020010151602001516040516101db91906105b5565b6000604051808303816000865af19150503d8060008114610218576040519150601f19603f3d011682016040523d82523d6000602084013e61021d565b606091505b50915091508515610232578161023257600080fd5b604051806040016040528083151581526020018281525084848151811061025b5761025b61059f565b602002602001018190525050508080610273906105e7565b91505061017d565b509250929050565b6000610290600143610602565b40905090565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156102cf576102cf610296565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156102fe576102fe610296565b604052919050565b80356001600160a01b038116811461031d57600080fd5b919050565b8035801515811461031d57600080fd5b6000806040838503121561034557600080fd5b823567ffffffffffffffff8082111561035d57600080fd5b818501915085601f83011261037157600080fd5b813560208282111561038557610385610296565b8160051b6103948282016102d5565b928352848101820192828101908a8511156103ae57600080fd5b83870192505b84831015610481578235868111156103cb57600080fd5b8701601f196040828e03820112156103e257600080fd5b6103ea6102ac565b6103f5878401610306565b815260408301358981111561040957600080fd5b8084019350508d603f84011261041e57600080fd5b868301358981111561043257610432610296565b6104428884601f840116016102d5565b92508083528e604082860101111561045957600080fd5b80604085018985013760009083018801528087019190915283525091830191908301906103b4565b9750610491915050878201610322565b9450505050509250929050565b60005b838110156104b95781810151838201526020016104a1565b838111156104c8576000848401525b50505050565b6000604080830185845260208281860152818651808452606093508387019150838160051b88010183890160005b8381101561055457898303605f1901855281518051151584528601518684018990528051898501819052610535818a8701848b0161049e565b95870195601f01601f19169390930187019250908501906001016104fc565b50909a9950505050505050505050565b60006020828403121561057657600080fd5b61057f82610306565b9392505050565b60006020828403121561059857600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b600082516105c781846020870161049e565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156105fb576105fb6105d1565b5060010190565b600082821015610614576106146105d1565b50039056fea2646970667358221220de01c3d43c43d3413e7402c21abb4cc2b193d0c23d8222ce7e83ca80fe7d342c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100e657806386d516e8146100ec578063a8b0574e146100f2578063ee82ac5e1461010057600080fd5b80630f28c97d1461008d57806317352e13146100a257806327e86d6e146100c35780634d2301cc146100cb575b600080fd5b425b6040519081526020015b60405180910390f35b6100b56100b0366004610332565b610112565b6040516100999291906104ce565b61008f610283565b61008f6100d9366004610564565b6001600160a01b03163190565b4461008f565b4561008f565b604051418152602001610099565b61008f61010e366004610586565b4090565b8151439060609067ffffffffffffffff81111561013157610131610296565b60405190808252806020026020018201604052801561017757816020015b60408051808201909152600081526060602082015281526020019060019003908161014f5790505b50905060005b845181101561027b5760008086838151811061019b5761019b61059f565b6020026020010151600001516001600160a01b03168784815181106101c2576101c261059f565b6020026020010151602001516040516101db91906105b5565b6000604051808303816000865af19150503d8060008114610218576040519150601f19603f3d011682016040523d82523d6000602084013e61021d565b606091505b50915091508515610232578161023257600080fd5b604051806040016040528083151581526020018281525084848151811061025b5761025b61059f565b602002602001018190525050508080610273906105e7565b91505061017d565b509250929050565b6000610290600143610602565b40905090565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156102cf576102cf610296565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156102fe576102fe610296565b604052919050565b80356001600160a01b038116811461031d57600080fd5b919050565b8035801515811461031d57600080fd5b6000806040838503121561034557600080fd5b823567ffffffffffffffff8082111561035d57600080fd5b818501915085601f83011261037157600080fd5b813560208282111561038557610385610296565b8160051b6103948282016102d5565b928352848101820192828101908a8511156103ae57600080fd5b83870192505b84831015610481578235868111156103cb57600080fd5b8701601f196040828e03820112156103e257600080fd5b6103ea6102ac565b6103f5878401610306565b815260408301358981111561040957600080fd5b8084019350508d603f84011261041e57600080fd5b868301358981111561043257610432610296565b6104428884601f840116016102d5565b92508083528e604082860101111561045957600080fd5b80604085018985013760009083018801528087019190915283525091830191908301906103b4565b9750610491915050878201610322565b9450505050509250929050565b60005b838110156104b95781810151838201526020016104a1565b838111156104c8576000848401525b50505050565b6000604080830185845260208281860152818651808452606093508387019150838160051b88010183890160005b8381101561055457898303605f1901855281518051151584528601518684018990528051898501819052610535818a8701848b0161049e565b95870195601f01601f19169390930187019250908501906001016104fc565b50909a9950505050505050505050565b60006020828403121561057657600080fd5b61057f82610306565b9392505050565b60006020828403121561059857600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b600082516105c781846020870161049e565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156105fb576105fb6105d1565b5060010190565b600082821015610614576106146105d1565b50039056fea2646970667358221220de01c3d43c43d3413e7402c21abb4cc2b193d0c23d8222ce7e83ca80fe7d342c64736f6c63430008090033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>Bogdan Dumitru <bogdan@bowd.io>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}