{
  "address": "0x47E0B35dFEbd4ADbb04474BcE722B9B4F9E9c87c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DecreasedEnergy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DecreasedLife",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DecreasedLink",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "IncreasedEnergy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "IncreasedLife",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "IncreasedLink",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "MintedNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CWOLFContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HuntingNFTContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MaterialsNFTContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VariablesContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WolfsNFTContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activateDeactivatePromo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_materialId",
          "type": "uint256"
        }
      ],
      "name": "addMaterialToWolfPack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_materialsIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_wolfsIds",
          "type": "uint256[]"
        }
      ],
      "name": "addMultipleMaterialsAndWolfsToWolfPack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_materialsIds",
          "type": "uint256[]"
        }
      ],
      "name": "addMultipleMaterialsToWolfPack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_wolfsIds",
          "type": "uint256[]"
        }
      ],
      "name": "addMultipleWolfsToWolfPack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addWolfOrMaterialCWOLFInDollar",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wolfId",
          "type": "uint256"
        }
      ],
      "name": "addWolfToWolfPack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountCWOLF",
          "type": "uint256"
        }
      ],
      "name": "buyEnergy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOfDays",
          "type": "uint256"
        }
      ],
      "name": "buyWolfPackLink",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateGasAndCommissions",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        }
      ],
      "name": "calculateInitialWolfPackLife",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseTokenURI",
          "type": "string"
        }
      ],
      "name": "changeBaseTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "changeClaimContractAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "changeMarketplaceContractAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        }
      ],
      "name": "checkWolfPackLink",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        }
      ],
      "name": "checkWolfPackStatusDeadOrAlive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        }
      ],
      "name": "checkWolfPackStatusPromo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commissionInDollar",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commissionWalletAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_materialsIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_wolfsIds",
          "type": "uint256[]"
        }
      ],
      "name": "createWolfPackAndAddWolfsAndMaterials",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dateLastPromoActivation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daysOfPromo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseWolfPackLife",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseWolfPackLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        }
      ],
      "name": "destroyWolfPack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "energyCommission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "energyPointPriceInCWOLF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasToMinter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOfDays",
          "type": "uint256"
        }
      ],
      "name": "getConfigurationLinkDays",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        }
      ],
      "name": "getTotalMaterialsInWolfPack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        }
      ],
      "name": "getTotalSlotsAvailableInWolfPack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        }
      ],
      "name": "getTotalSlotsInWolfPack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        }
      ],
      "name": "getWolfPackLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseWolfPackLife",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseWolfPackLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "CWOLFContractAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardsPoolAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minterWalletAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WolfsNFTContractAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "MaterialsNFTContractAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "VariablesContractAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "commissionWalletAddress_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPromoActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastHunting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkCommission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketPlaceAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "materialsInWolfPack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "materialsUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "mintOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintWithCWOLF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterWalletAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        }
      ],
      "name": "pointsOfWolfPack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newDaysOfPromo",
          "type": "uint256"
        }
      ],
      "name": "setDaysOfPromo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastHunting",
          "type": "uint256"
        }
      ],
      "name": "setLastHunting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wolfPackId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setPromoStatusForWolfPack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strBaseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wolfPackEnergy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wolfPackInPromo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wolfPackLife",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wolfPackLinkDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wolfPackLinkDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wolfsInWolfPack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wolfsUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x054739ac29d0c6091512517d7624352e45733f86e640dc1c5bc956f0582759ea",
  "receipt": {
    "to": null,
    "from": "0x759a1040B2bc2220f8ef16aC12E4B6A18d3d2DF7",
    "contractAddress": "0x47E0B35dFEbd4ADbb04474BcE722B9B4F9E9c87c",
    "transactionIndex": 23,
    "gasUsed": "5236946",
    "logsBloom": "0x
    "blockHash": "0x57b5228983410b4a87aae321fc3da6fc04a4093be5c63053456c6d0499d5b707",
    "transactionHash": "0x054739ac29d0c6091512517d7624352e45733f86e640dc1c5bc956f0582759ea",
    "logs": [],
    "blockNumber": 15832432,
    "cumulativeGasUsed": "9305656",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "06e007c94bd4bdc65844a831d4ab7746",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DecreasedEnergy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DecreasedLife\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DecreasedLink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"IncreasedEnergy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"IncreasedLife\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"IncreasedLink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"MintedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CWOLFContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HuntingNFTContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaterialsNFTContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VariablesContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WolfsNFTContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateDeactivatePromo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_materialId\",\"type\":\"uint256\"}],\"name\":\"addMaterialToWolfPack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_materialsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_wolfsIds\",\"type\":\"uint256[]\"}],\"name\":\"addMultipleMaterialsAndWolfsToWolfPack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_materialsIds\",\"type\":\"uint256[]\"}],\"name\":\"addMultipleMaterialsToWolfPack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_wolfsIds\",\"type\":\"uint256[]\"}],\"name\":\"addMultipleWolfsToWolfPack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addWolfOrMaterialCWOLFInDollar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wolfId\",\"type\":\"uint256\"}],\"name\":\"addWolfToWolfPack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountCWOLF\",\"type\":\"uint256\"}],\"name\":\"buyEnergy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfDays\",\"type\":\"uint256\"}],\"name\":\"buyWolfPackLink\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateGasAndCommissions\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"}],\"name\":\"calculateInitialWolfPackLife\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseTokenURI\",\"type\":\"string\"}],\"name\":\"changeBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeClaimContractAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeMarketplaceContractAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"}],\"name\":\"checkWolfPackLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"}],\"name\":\"checkWolfPackStatusDeadOrAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"}],\"name\":\"checkWolfPackStatusPromo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionInDollar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_materialsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_wolfsIds\",\"type\":\"uint256[]\"}],\"name\":\"createWolfPackAndAddWolfsAndMaterials\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateLastPromoActivation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysOfPromo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseWolfPackLife\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseWolfPackLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"}],\"name\":\"destroyWolfPack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"energyCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"energyPointPriceInCWOLF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasToMinter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfDays\",\"type\":\"uint256\"}],\"name\":\"getConfigurationLinkDays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"}],\"name\":\"getTotalMaterialsInWolfPack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"}],\"name\":\"getTotalSlotsAvailableInWolfPack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"}],\"name\":\"getTotalSlotsInWolfPack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"}],\"name\":\"getWolfPackLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseWolfPackLife\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseWolfPackLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"CWOLFContractAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsPoolAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minterWalletAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WolfsNFTContractAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"MaterialsNFTContractAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"VariablesContractAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"commissionWalletAddress_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPromoActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastHunting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlaceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"materialsInWolfPack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"materialsUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintWithCWOLF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"}],\"name\":\"pointsOfWolfPack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDaysOfPromo\",\"type\":\"uint256\"}],\"name\":\"setDaysOfPromo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastHunting\",\"type\":\"uint256\"}],\"name\":\"setLastHunting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wolfPackId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPromoStatusForWolfPack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strBaseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wolfPackEnergy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wolfPackInPromo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wolfPackLife\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wolfPackLinkDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wolfPackLinkDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wolfsInWolfPack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wolfsUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WolfPacksNFT.sol\":\"WolfPacksNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x45ed45e599d282187d4eb122e5b99e403f3d87853ba6c28a844702141d3fa587\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x046a0ed44997d20c6fac6fb186cb2ce8957a1b25497f713bc18c79db21e57dee\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7090f66700fbb4955abf72ba8e06e4a1eafb5bae1423032102dcbb2172da5543\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x49915fbc84c030ba425312356c1a0a28f81cdee5ab637f7a264752b52243fec6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8116b65b11e0a65ad6cf40cf2d71d2dacad80ddc37ad42af965fc919afb19e5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5f8d2e5137f7603eeaa0516e5b40dc6e637f179edea8134f1dbef9754c9baf2b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Enumerable_init_unchained();\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal initializer {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xe3bdc0a0942d52ce8d7e968986db04b58f377661520067ea0087a5690afe7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf504eeb1d445ef4e4b4b2726d4776a01299c8e1715962ac2aeccb7be85c45246\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe0091487bb0da2016b050e276b74e83a3a4fa641f65600558281a3dc3ef24994\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23ee0c2d7bcce5d09d40f3a14c91f29000d3a83b8a9c26440cd1b3748a93ea47\",\"license\":\"MIT\"},\"contracts/Claim.sol\":{\"content\":\"/*\\nCRYPTOWOLF\\nWeb: https://cryptowolf.finance\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./DateTimeLibrary.sol\\\";\\nimport \\\"./Variables.sol\\\";\\nimport \\\"./WolfPacksNFT.sol\\\";\\n\\ncontract Claim is\\n    Initializable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    bool public isInitialized;\\n\\n    uint8 public topLevel;\\n    uint256 public reductionBasisPoints;\\n    address public CWOLFContractAddress;\\n    address public huntingNFTContractAddress;\\n    address public rewardsPoolAddress;\\n\\n    mapping(address => bool) public usersRegistered;\\n    mapping(address => uint256) public usersAmount;\\n    mapping(address => uint8) public usersPenalizationLevel;\\n    mapping(address => uint256) public usersTaxAmount;\\n    mapping(address => uint256) public dateUsersLastReduction;\\n    mapping(address => uint256) public dateUsersLastHunt;\\n    mapping(address => uint256) public usersLastDayHunt;\\n    mapping(address => uint256) public usersLastMonthHunt;\\n    mapping(address => uint256) public usersLastYearHunt;\\n\\n    mapping(uint8 => uint256) public levelsPercentages;\\n\\n    address public variablesContractAddress;\\n    address public wolfPacksContractAddress;\\n\\n    event Deposit(address indexed user, uint256 indexed amountDeposited);\\n    event ClaimReward(\\n        address indexed user,\\n        uint256 indexed amountToClaim,\\n        uint256 indexed penalizationAmount\\n    );\\n\\n    event ChangeAmount(address indexed wallet, uint256 indexed amount);\\n    event BuyEnergyWithClaim(address indexed wallet, uint256 indexed amount);\\n    event BuyLinkWithClaim(address indexed wallet, uint256 indexed amount);\\n\\n    constructor() initializer {}\\n\\n    function initialize(\\n        address CWOLFContractAddress_,\\n        address huntingNFTContractAddress_,\\n        address rewardsPoolAddress_,\\n        address variablesContractAddress_\\n    ) public initializer {\\n        __Ownable_init();\\n        isInitialized = true;\\n\\n        CWOLFContractAddress = CWOLFContractAddress_;\\n        huntingNFTContractAddress = huntingNFTContractAddress_;\\n        rewardsPoolAddress = rewardsPoolAddress_;\\n        levelsPercentages[0] = 4500;\\n        levelsPercentages[1] = 5400;\\n        levelsPercentages[2] = 6300;\\n        levelsPercentages[3] = 7200;\\n        levelsPercentages[4] = 8100;\\n        levelsPercentages[5] = 9000;\\n\\n        reductionBasisPoints = 300;\\n        topLevel = 5;\\n        variablesContractAddress = variablesContractAddress_;\\n        // Uncomment if we want deploy paused\\n        // _pause();\\n    }\\n\\n    function addReward(address _userAddress, uint256 _rewardAmount) external {\\n        require(\\n            msg.sender == huntingNFTContractAddress,\\n            \\\"Caller is not Hunting Contract\\\"\\n        );\\n\\n        usersAmount[_userAddress] = usersAmount[_userAddress] + _rewardAmount;\\n\\n        // Si el usuario no est\\u00e1 registrado, preparamos todos sus datos\\n        if (!usersRegistered[_userAddress]) {\\n            _setUser(_userAddress);\\n        }\\n\\n        // Comprobamos si se le quita penalizaci\\u00f3n, si ya ha cazado hoy, no se le quita m\\u00e1s\\n        if (checkIfCanDecreasePenalization(_userAddress)) {\\n            decreasePenalizationAmount(_userAddress, 1);\\n        }\\n        // Seteamos los datos de hoy respecto a la caza\\n        dateUsersLastHunt[_userAddress] = block.timestamp;\\n\\n        emit Deposit(_userAddress, _rewardAmount);\\n    }\\n\\n    function claimReward() external nonReentrant {\\n        require(usersRegistered[msg.sender], \\\"User not registered\\\");\\n        require(\\n            usersAmount[msg.sender] > 0,\\n            \\\"User does not have any amount to claim\\\"\\n        );\\n\\n        uint256 _feeAmount = (usersAmount[msg.sender] *\\n            usersTaxAmount[msg.sender]) / 10000;\\n\\n        uint256 _amountToClaim = usersAmount[msg.sender] - _feeAmount;\\n\\n        IERC20Upgradeable(CWOLFContractAddress).transferFrom(\\n            rewardsPoolAddress,\\n            msg.sender,\\n            _amountToClaim\\n        );\\n\\n        usersAmount[msg.sender] = 0;\\n\\n        if (usersTaxAmount[msg.sender] > 0) {\\n            usersPenalizationLevel[msg.sender] = usersPenalizationLevel[\\n                msg.sender\\n            ] < topLevel\\n                ? usersPenalizationLevel[msg.sender] + 1\\n                : topLevel;\\n        } else {\\n            usersPenalizationLevel[msg.sender] = 0;\\n        }\\n        usersTaxAmount[msg.sender] = levelsPercentages[\\n            usersPenalizationLevel[msg.sender]\\n        ];\\n\\n        emit ClaimReward(\\n            msg.sender,\\n            _amountToClaim,\\n            usersTaxAmount[msg.sender]\\n        );\\n    }\\n\\n    function decreasePenalizationAmount(\\n        address _userAddress,\\n        uint256 _amountOfDays\\n    ) internal {\\n        uint256 totalBasisPointsToReduce = reductionBasisPoints * _amountOfDays;\\n        if (totalBasisPointsToReduce > usersTaxAmount[_userAddress]) {\\n            usersTaxAmount[_userAddress] = 0;\\n        } else {\\n            usersTaxAmount[_userAddress] =\\n                usersTaxAmount[_userAddress] -\\n                totalBasisPointsToReduce;\\n        }\\n        //dateUsersLastReduction[_userAddress] = block.timestamp;\\n    }\\n\\n    function changeReductionBasisPoints(uint256 _newReductionBasisPoints)\\n        external\\n        onlyOwner\\n    {\\n        reductionBasisPoints = _newReductionBasisPoints;\\n    }\\n\\n    function checkIfCanDecreasePenalization(address _userAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint256 lastTs = DateTimeLibrary.timestampFromDate(\\n            DateTimeLibrary.getYear(dateUsersLastHunt[_userAddress]),\\n            DateTimeLibrary.getMonth(dateUsersLastHunt[_userAddress]),\\n            DateTimeLibrary.getDay(dateUsersLastHunt[_userAddress])\\n        );\\n\\n        uint256 nowTs = DateTimeLibrary.timestampFromDate(\\n            DateTimeLibrary.getYear(block.timestamp),\\n            DateTimeLibrary.getMonth(block.timestamp),\\n            DateTimeLibrary.getDay(block.timestamp)\\n        );\\n\\n        return (dateUsersLastHunt[_userAddress] > 0 && (nowTs > lastTs));\\n    }\\n\\n    function changeHuntingNFTContractAddress(\\n        address _newHuntingNFTContractAddress\\n    ) external onlyOwner {\\n        huntingNFTContractAddress = _newHuntingNFTContractAddress;\\n    }\\n\\n    function changeRewardsPoolAddress(address _newRewardsPoolAddress)\\n        external\\n        onlyOwner\\n    {\\n        rewardsPoolAddress = _newRewardsPoolAddress;\\n    }\\n\\n    function changeVariablesContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        variablesContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function _setUser(address _userAddress) internal {\\n        usersPenalizationLevel[_userAddress] = 0;\\n        usersTaxAmount[_userAddress] = levelsPercentages[\\n            usersPenalizationLevel[_userAddress]\\n        ];\\n        usersRegistered[_userAddress] = true;\\n        //dateUsersLastReduction[_userAddress] = block.timestamp;\\n    }\\n\\n    function changeWolfpacksContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        wolfPacksContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function buyEnergyWithClaim(uint256 _wolfPackId, uint256 _amountCWOLF)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(\\n            usersAmount[msg.sender] >= _amountCWOLF,\\n            \\\"Not enough amount of CWOLF\\\"\\n        );\\n        require(\\n            WolfPacksNFT(wolfPacksContractAddress).ownerOf(_wolfPackId) ==\\n                msg.sender,\\n            \\\"Owner of WolfPack failed\\\"\\n        );\\n\\n        uint256 energyCommission = WolfPacksNFT(wolfPacksContractAddress)\\n            .energyCommission();\\n        address commissionWalletAddress = WolfPacksNFT(wolfPacksContractAddress)\\n            .commissionWalletAddress();\\n\\n        uint256 energyCommissionInBNB = Variables(variablesContractAddress)\\n            .getDollarsInBNB(energyCommission);\\n        require(msg.value >= energyCommissionInBNB, \\\"Not enough value\\\");\\n        payable(commissionWalletAddress).transfer(energyCommissionInBNB);\\n        payable(msg.sender).transfer(msg.value - energyCommissionInBNB);\\n\\n        uint256 _amountInDollar = (Variables(variablesContractAddress)\\n            .priceCWOLF() * _amountCWOLF) / 1e18;\\n\\n        WolfPacksNFT(wolfPacksContractAddress).increaseEnergy(\\n            _wolfPackId,\\n            _amountInDollar\\n        );\\n\\n        usersAmount[msg.sender] = usersAmount[msg.sender] - _amountCWOLF;\\n\\n        emit BuyEnergyWithClaim(msg.sender, _amountCWOLF);\\n    }\\n\\n    function buyLinkWithClaim(uint256 _wolfPackId, uint256 _amountOfDays)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(\\n            WolfPacksNFT(wolfPacksContractAddress).ownerOf(_wolfPackId) ==\\n                msg.sender,\\n            \\\"Owner of WolfPack failed\\\"\\n        );\\n        require(\\n            WolfPacksNFT(wolfPacksContractAddress).getConfigurationLinkDays(_amountOfDays) == true,\\n            \\\"Error: Amount of days incorrect\\\"\\n        );\\n\\n        uint256 linkCommission = WolfPacksNFT(wolfPacksContractAddress)\\n            .linkCommission();\\n        address commissionWalletAddress = WolfPacksNFT(wolfPacksContractAddress)\\n            .commissionWalletAddress();\\n\\n        uint256 linkCommissionInBNB = Variables(variablesContractAddress)\\n            .getDollarsInBNB(linkCommission);\\n        require(msg.value >= linkCommissionInBNB, \\\"Not enough value\\\");\\n        payable(commissionWalletAddress).transfer(linkCommissionInBNB);\\n        payable(msg.sender).transfer(msg.value - linkCommissionInBNB);\\n\\n        uint256 totalDollars = ((_amountOfDays * 10**18) * 5000) / 10000;\\n        uint256 wolfPackLength = WolfPacksNFT(wolfPacksContractAddress).getWolfPackLength(_wolfPackId);\\n        uint256 amountInCWOLF = Variables(variablesContractAddress).getDollarsInCWOLF(totalDollars * wolfPackLength);\\n        require(\\n            usersAmount[msg.sender] >= amountInCWOLF,\\n            \\\"Not enough amount of CWOLF\\\"\\n        );\\n        WolfPacksNFT(wolfPacksContractAddress).increaseWolfPackLink(\\n            _wolfPackId,\\n            _amountOfDays\\n        );\\n        \\n        usersAmount[msg.sender] = usersAmount[msg.sender] - amountInCWOLF;\\n\\n        emit BuyLinkWithClaim(msg.sender, amountInCWOLF);\\n\\n    }\\n}\\n\",\"keccak256\":\"0xe57aa294c770942cff849084ba00fc31aadb0f87d7d6605597bbc738aa461fea\",\"license\":\"MIT\"},\"contracts/DateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint256 daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year -= _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _years)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _months)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(\\n            fromTimestamp / SECONDS_PER_DAY\\n        );\\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(\\n            toTimestamp / SECONDS_PER_DAY\\n        );\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _days)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _hours)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _minutes)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _seconds)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x9558a1e1461d9ede34fbae81ca81ed19560c64ccf2e5c183e83e5f97db4f279d\",\"license\":\"MIT\"},\"contracts/HuntingNFT.sol\":{\"content\":\"/*\\nCRYPTOWOLF\\nWeb: https://cryptowolf.finance\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./DateTimeLibrary.sol\\\";\\n\\nimport \\\"./WolfsNFT.sol\\\";\\nimport \\\"./WolfPacksNFT.sol\\\";\\nimport \\\"./Variables.sol\\\";\\nimport \\\"./Claim.sol\\\";\\n\\ncontract HuntingNFT is\\n    Initializable,\\n    ERC721EnumerableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    bool public isInitialized;\\n    uint256 public boxPriceCWOLF;\\n    uint256 public gasToMinter;\\n    address public rewardsPoolAddress;\\n    address public CWOLFContractAddress;\\n    address public WolfPackNFTContractAddress;\\n    address public minterWalletAddress;\\n    string public strBaseTokenURI;\\n\\n    uint256[] public animalsPoints;\\n    uint256[] public animalsProbability;\\n    uint256[] public animalsRewards;\\n\\n    mapping(uint256 => uint256) public wolfPackId;\\n    mapping(uint256 => uint256) public positionToAttack;\\n    mapping(uint256 => uint256) public dateOfHunting;\\n    mapping(uint256 => uint256) public rewards;\\n    mapping(uint256 => bool) public isGenerated;\\n    mapping(uint256 => bool) public isClaimed;\\n\\n    address public ClaimContractAddress;\\n    address public VariablesContractAddress;\\n    address public commissionWalletAddress;\\n\\n    address public minterWalletAddress2;\\n    address public minterWalletAddress3;\\n    address public minterWalletAddress4;\\n\\n    uint256[] public bnbForMint;\\n    uint256[] public benefit;\\n\\n    event MintedNFT(address indexed to, uint256 indexed id);\\n    event GeneratedResultNFT(uint256 indexed tokenId); // Revisar qu\\u00e9 parametros son necesarios\\n\\n    constructor() initializer {}\\n\\n    function initialize(\\n        address CWOLFContractAddress_,\\n        address rewardsPoolAddress_,\\n        address minterWalletAddress_,\\n        address WolfPackNFTContractAddress_,\\n        address commissionWalletAddress_\\n    ) public initializer {\\n        __ERC721_init(\\\"HuntingNFT\\\", \\\"HuntingNFT\\\");\\n        __Ownable_init();\\n        CWOLFContractAddress = CWOLFContractAddress_;\\n        rewardsPoolAddress = rewardsPoolAddress_;\\n        gasToMinter = 1000000000000000;\\n        minterWalletAddress = minterWalletAddress_;\\n        WolfPackNFTContractAddress = WolfPackNFTContractAddress_;\\n\\n        // First WOLFPACK must be 0 capacity\\n        _safeMint(minterWalletAddress_, 0);\\n        isInitialized = true;\\n        commissionWalletAddress = commissionWalletAddress_;\\n        // Uncomment if we want deploy paused\\n        // _pause();\\n    }\\n\\n    function initializeBnbForMint() external onlyOwner returns (bool) {\\n        bnbForMint = [\\n            900000000000000,\\n            1900000000000000,\\n            2300000000000000,\\n            3100000000000000,\\n            3900000000000000,\\n            4500000000000000,\\n            5100000000000000,\\n            5800000000000000,\\n            6700000000000000,\\n            7300000000000000,\\n            8000000000000000,\\n            8600000000000000,\\n            9200000000000000,\\n            9800000000000000,\\n            10400000000000000,\\n            10900000000000000,\\n            11600000000000000,\\n            12200000000000000,\\n            12800000000000000,\\n            13400000000000000,\\n            14700000000000000,\\n            16000000000000000,\\n            17200000000000000,\\n            18500000000000000,\\n            19700000000000000,\\n            21200000000000000,\\n            22600000000000000,\\n            24000000000000000,\\n            25500000000000000,\\n            27000000000000000\\n        ];\\n        return true;\\n    }\\n\\n    function initializeBenefits() external onlyOwner returns (bool) {\\n        benefit = [\\n            400000000000000000,\\n            750000000000000000,\\n            1100000000000000000,\\n            1450000000000000000,\\n            1800000000000000000,\\n            2150000000000000000,\\n            2500000000000000000,\\n            2850000000000000000,\\n            3200000000000000000,\\n            3550000000000000000,\\n            3900000000000000000,\\n            4250000000000000000,\\n            4600000000000000000,\\n            4950000000000000000,\\n            5300000000000000000,\\n            5650000000000000000,\\n            6000000000000000000,\\n            6350000000000000000,\\n            6700000000000000000,\\n            7050000000000000000,\\n            7400000000000000000,\\n            7750000000000000000,\\n            8100000000000000000,\\n            8450000000000000000,\\n            8800000000000000000,\\n            9150000000000000000,\\n            9500000000000000000,\\n            9850000000000000000,\\n            10200000000000000000,\\n            10550000000000000000\\n        ];\\n        return true;\\n    }\\n\\n    function mintWithCWOLF(uint256 _wolfPackId, uint256 _positionToAttack)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        returns (bool)\\n    {\\n        // Comprobar que la manada sea del msg.sender\\n        require(\\n            WolfPacksNFT(WolfPackNFTContractAddress).ownerOf(_wolfPackId) ==\\n                msg.sender,\\n            \\\"You are not the owner\\\"\\n        );\\n\\n        // Revisamos que la manada pueda ir a cazar\\n        checkWolfPack(_wolfPackId, _positionToAttack);\\n\\n        uint256 commissionInDollars = _getCommissionForAttack(\\n            _positionToAttack\\n        );\\n        uint256 commissionInBNB = Variables(VariablesContractAddress)\\n            .getDollarsInBNB(commissionInDollars);\\n\\n        uint256 commissionForGas = _getCommissionForMinter(_positionToAttack);\\n\\n        require(\\n            msg.value >= (commissionForGas + commissionInBNB),\\n            \\\"Not enough gas\\\"\\n        );\\n\\n        payable(minterWalletAddress).transfer(commissionForGas);\\n        payable(commissionWalletAddress).transfer(commissionInBNB);\\n        payable(msg.sender).transfer(\\n            msg.value - (commissionForGas + commissionInBNB)\\n        );\\n\\n        require(\\n            IERC20Upgradeable(CWOLFContractAddress).allowance(\\n                msg.sender,\\n                address(this)\\n            ) >= boxPriceCWOLF,\\n            \\\"Not enough allowance\\\"\\n        );\\n\\n        IERC20Upgradeable(CWOLFContractAddress).transferFrom(\\n            msg.sender,\\n            rewardsPoolAddress,\\n            boxPriceCWOLF\\n        );\\n\\n        uint256 huntingId = mint(msg.sender);\\n\\n        wolfPackId[huntingId] = _wolfPackId;\\n        positionToAttack[huntingId] = _positionToAttack;\\n\\n        dateOfHunting[huntingId] = block.timestamp;\\n\\n        WolfPacksNFT(WolfPackNFTContractAddress).setLastHunting(\\n            _wolfPackId,\\n            block.timestamp\\n        );\\n\\n        uint256 calculateSubEnergy = (animalsRewards[_positionToAttack] * 250) /\\n            10000;\\n\\n        WolfPacksNFT(WolfPackNFTContractAddress).decreaseEnergy(\\n            _wolfPackId,\\n            calculateSubEnergy\\n        );\\n\\n        WolfPacksNFT(WolfPackNFTContractAddress).decreaseWolfPackLink(\\n            _wolfPackId,\\n            1\\n        );\\n\\n        return true;\\n    }\\n\\n    function _getCommissionForAttack(uint256 _positionToAttack)\\n        internal\\n        view\\n        returns (uint256 commission)\\n    {\\n        return benefit[_positionToAttack];\\n    }\\n\\n    function _getCommissionForMinter(uint256 _positionToAttack)\\n        internal\\n        view\\n        returns (uint256 commission)\\n    {\\n        return bnbForMint[_positionToAttack];\\n    }\\n\\n    function calculateGasAndCommissions(uint256 _positionToAttack)\\n        public\\n        view\\n        returns (uint256[3] memory)\\n    {\\n        uint256 commissionInDollars = _getCommissionForAttack(\\n            _positionToAttack\\n        );\\n\\n        uint256 commissionInBNB = Variables(VariablesContractAddress)\\n            .getDollarsInBNB(commissionInDollars);\\n\\n        uint256 commissionForGas = _getCommissionForMinter(_positionToAttack);\\n\\n        uint256[3] memory commissions;\\n        commissions[0] = commissionForGas;\\n        commissions[1] = commissionInBNB;\\n        commissions[2] = commissionForGas + commissionInBNB;\\n        return commissions;\\n    }\\n\\n    function checkWolfPack(uint256 _wolfPackId, uint256 _positionToAttack)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        WolfPacksNFT wolfPacksNFT = WolfPacksNFT(WolfPackNFTContractAddress);\\n        uint256 pointsOfWolfPack = wolfPacksNFT.pointsOfWolfPack(_wolfPackId);\\n\\n        // Comprobamos que la manada tenga puntos para poder atacar al animal\\n        uint256 animalsPointsToAttack = animalsPoints[_positionToAttack];\\n        require(\\n            pointsOfWolfPack >= animalsPointsToAttack,\\n            \\\"Not enough points to attack this animal\\\"\\n        );\\n\\n        // Comprobamos que la manada pueda ir a cazar\\n        uint256 lastHunting = WolfPacksNFT(WolfPackNFTContractAddress)\\n            .lastHunting(_wolfPackId);\\n        if (lastHunting != 0) {\\n            uint256 lastTs = DateTimeLibrary.timestampFromDate(\\n                DateTimeLibrary.getYear(lastHunting),\\n                DateTimeLibrary.getMonth(lastHunting),\\n                DateTimeLibrary.getDay(lastHunting)\\n            );\\n\\n            uint256 nowTs = DateTimeLibrary.timestampFromDate(\\n                DateTimeLibrary.getYear(block.timestamp),\\n                DateTimeLibrary.getMonth(block.timestamp),\\n                DateTimeLibrary.getDay(block.timestamp)\\n            );\\n\\n            require(nowTs > lastTs, \\\"Only one time per day\\\");\\n        }\\n\\n        bool statusLife = WolfPacksNFT(WolfPackNFTContractAddress)\\n            .checkWolfPackStatusDeadOrAlive(_wolfPackId);\\n        require(statusLife, \\\"Your wolfpack is dead\\\");\\n\\n        // Mirar que la vida del mapping wolfPackEnergy sea mayor > que 250/10000 recompensa\\n        uint256 energy = WolfPacksNFT(WolfPackNFTContractAddress)\\n            .wolfPackEnergy(_wolfPackId);\\n        uint256 energyCost = (animalsRewards[_positionToAttack] * 250) / 10000;\\n        require(energy >= energyCost, \\\"Your wolfpack are tired\\\");\\n        // Comprobar el v\\u00ednculo.\\n        bool statusLink = WolfPacksNFT(WolfPackNFTContractAddress)\\n            .checkWolfPackLink(_wolfPackId);\\n        require(statusLink, \\\"Your wolfpack haven't got link\\\");\\n        return true;\\n    }\\n\\n    function getWinProbability(uint256 _wolfPackId, uint256 _positionToAttack)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 pointsOfPosition = animalsPoints[_positionToAttack];\\n        uint256 probabilityToWin = animalsProbability[_positionToAttack];\\n\\n        uint256 pointsOfAttack = WolfPacksNFT(WolfPackNFTContractAddress)\\n            .pointsOfWolfPack(_wolfPackId);\\n        // Si la probabilidad es >= 90 la devolvemos\\n        if (probabilityToWin >= 90) {\\n            return probabilityToWin;\\n        }\\n\\n        // Si es menor, la aumentamos en funci\\u00f3n de 1% por cada 100 puntos de exceso\\n        // uint256 pointsOfAnimalsToAttack = animalsPoints[_positionToAttack];\\n        uint256 excessPoints = pointsOfAttack - pointsOfPosition;\\n        uint256 probabilityToSum = (excessPoints / 100);\\n        uint256 totalProbability = probabilityToWin + probabilityToSum;\\n\\n        if (totalProbability >= 90) {\\n            return 90;\\n        } else {\\n            return totalProbability;\\n        }\\n    }\\n\\n    function mint(address _to) internal returns (uint256) {\\n        uint256 tokenId = totalSupply();\\n        _safeMint(_to, tokenId);\\n        emit MintedNFT(_to, tokenId);\\n        return tokenId;\\n    }\\n\\n    function generateResult(uint256[] memory _huntingIds, bytes32 _seed)\\n        external\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < _huntingIds.length; index++) {\\n            uint256 huntingId = _huntingIds[index];\\n\\n            require(huntingId != 0, \\\"Not allowed\\\");\\n            require(\\n                msg.sender == owner() ||\\n                    msg.sender == minterWalletAddress ||\\n                    msg.sender == minterWalletAddress2 ||\\n                    msg.sender == minterWalletAddress3 ||\\n                    msg.sender == minterWalletAddress4,\\n                \\\"Not allowed\\\"\\n            );\\n            require(_exists(huntingId), \\\"Token does not exist\\\");\\n            require(isGenerated[huntingId] == false);\\n\\n            uint256 positionToAttackAnimals = positionToAttack[huntingId];\\n\\n            uint256 wolfPackIdLocal = wolfPackId[huntingId];\\n\\n            address ownerOfWolfPack = ownerOf(huntingId);\\n\\n            uint256 winProbability = getWinProbability(\\n                wolfPackIdLocal,\\n                positionToAttackAnimals\\n            );\\n\\n            uint256 rewardsByPosition = animalsRewards[positionToAttackAnimals];\\n            if (\\n                WolfPacksNFT(WolfPackNFTContractAddress).wolfPackInPromo(\\n                    wolfPackIdLocal\\n                )\\n            ) {\\n                uint256 bonus = (animalsRewards[positionToAttackAnimals] *\\n                    2000) / 10000;\\n                rewardsByPosition =\\n                    animalsRewards[positionToAttackAnimals] +\\n                    bonus;\\n            } else {\\n                rewardsByPosition = animalsRewards[positionToAttackAnimals];\\n            }\\n\\n            uint256 random = Random.randomMinMax(\\n                keccak256(abi.encodePacked(_seed, index)),\\n                0,\\n                100\\n            );\\n\\n            if (random <= winProbability) {\\n                // Remove life\\n                uint256 calculateSubLife = (animalsPoints[\\n                    positionToAttackAnimals\\n                ] * 400) / 10000;\\n\\n                WolfPacksNFT(WolfPackNFTContractAddress).decreaseWolfPackLife(\\n                    wolfPackIdLocal,\\n                    calculateSubLife\\n                );\\n\\n                uint256 amountInCWOLF = Variables(VariablesContractAddress)\\n                    .getDollarsInCWOLF(rewardsByPosition);\\n\\n                rewards[huntingId] = amountInCWOLF;\\n\\n                Claim(ClaimContractAddress).addReward(\\n                    ownerOfWolfPack,\\n                    amountInCWOLF\\n                );\\n            } else {\\n                uint256 calculateSubLife = (animalsPoints[\\n                    positionToAttackAnimals\\n                ] * 1000) / 10000;\\n\\n                WolfPacksNFT(WolfPackNFTContractAddress).decreaseWolfPackLife(\\n                    wolfPackIdLocal,\\n                    calculateSubLife\\n                );\\n\\n                Claim(ClaimContractAddress).addReward(ownerOfWolfPack, 0);\\n            }\\n\\n            isGenerated[huntingId] = true;\\n\\n            emit GeneratedResultNFT(huntingId);\\n        }\\n\\n        return true;\\n    }\\n\\n    function changeAnimalsPoints(uint256[] memory _newData)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        animalsPoints = _newData;\\n        return true;\\n    }\\n\\n    function changeAnimalsProbability(uint256[] memory _newData)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        animalsProbability = _newData;\\n        return true;\\n    }\\n\\n    function changeAnimalsRewards(uint256[] memory _newData)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        animalsRewards = _newData;\\n        return true;\\n    }\\n\\n    function walletOfOwner(address _owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 tokenCount = balanceOf(_owner);\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\n        for (uint256 i = 0; i < tokenCount; i++) {\\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokensId;\\n    }\\n\\n    function changeBaseTokenURI(string memory newBaseTokenURI)\\n        external\\n        onlyOwner\\n    {\\n        strBaseTokenURI = newBaseTokenURI;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return strBaseTokenURI;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\n        return string(abi.encodePacked(_baseURI(), _tokenId.toString()));\\n    }\\n\\n    function pause() external onlyOwner returns (bool) {\\n        _pause();\\n        return true;\\n    }\\n\\n    function unpause() external onlyOwner returns (bool) {\\n        _unpause();\\n        return true;\\n    }\\n\\n    function changeRewardsPool(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        rewardsPoolAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeBoxPriceCWolf(uint256 _newPrice)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        boxPriceCWOLF = _newPrice;\\n        return true;\\n    }\\n\\n    function changeCWOLFContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        CWOLFContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeWolfPackNFTContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        WolfPackNFTContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeGasToMinter(uint256 _newValue)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        gasToMinter = _newValue;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet2(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress2 = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet3(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress3 = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet4(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress4 = _newAddress;\\n        return true;\\n    }\\n\\n    function changeClaimContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        ClaimContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeVariablesContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        VariablesContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeCommissionWalletAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        commissionWalletAddress = _newAddress;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xd47bec78597bb76390c2cf74b0eb9dd301045a7d65cfc70d56708af5ee53f523\",\"license\":\"MIT\"},\"contracts/MaterialsNFT.sol\":{\"content\":\"/*\\nCRYPTOWOLF\\nWeb: https://cryptowolf.finance\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./Random.sol\\\";\\nimport \\\"./Variables.sol\\\";\\nimport \\\"./WolfPacksNFT.sol\\\";\\n\\ncontract MaterialsNFT is\\n    Initializable,\\n    ERC721EnumerableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    bool public isInitialized;\\n    uint256 public boxPriceCWOLFInDollars;\\n    uint256 public gasToMinter;\\n    uint256 public commissionInDollars;\\n    address public rewardsPoolAddress;\\n    address public CWOLFContractAddress;\\n    address public VariablesContractAddress;\\n    address public minterWalletAddress;\\n    address public commissionWalletAddress;\\n    string public strBaseTokenURI;\\n\\n    uint256[] public materialsProbabilities;\\n\\n    mapping(uint256 => uint256) public slots;\\n    mapping(uint256 => bool) public generated;\\n\\n    address public WolfPackNFTContractAddress;\\n    address public marketPlaceAddress;\\n\\n    address public minterWalletAddress2;\\n    address public minterWalletAddress3;\\n    address public minterWalletAddress4;\\n\\n    event MintedNFT(address indexed to, uint256 indexed id);\\n    event GeneratedNFT(uint256 indexed id);\\n\\n    constructor() initializer {}\\n\\n    function initialize(\\n        address CWOLFContractAddress_,\\n        address VariablesContractAddress_,\\n        address rewardsPoolAddress_,\\n        address minterWalletAddress_,\\n        address commissionWalletAddress_\\n    ) public initializer {\\n        __ERC721_init(\\\"MaterialsNFT\\\", \\\"MaterialsNFT\\\");\\n        __Ownable_init();\\n        isInitialized = true;\\n        CWOLFContractAddress = CWOLFContractAddress_;\\n        VariablesContractAddress = VariablesContractAddress_;\\n        rewardsPoolAddress = rewardsPoolAddress_;\\n        gasToMinter = 1000000000000000;\\n        minterWalletAddress = minterWalletAddress_;\\n        commissionWalletAddress = commissionWalletAddress_;\\n        commissionInDollars = 250000000000000000;\\n        boxPriceCWOLFInDollars = 10000000000000000000;\\n        materialsProbabilities = [54, 78, 90, 96, 99, 100];\\n\\n        // First CAVE must be 0 capacity\\n        _safeMint(minterWalletAddress_, 0);\\n\\n        // Uncomment if we want deploy paused\\n        // _pause();\\n    }\\n\\n    function mintOwner(address _to) external onlyOwner returns (uint256) {\\n        return mint(_to);\\n    }\\n\\n    function mintWithCWOLF(uint8 _amount)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        returns (bool)\\n    {\\n        uint256 commissionInBNB = Variables(VariablesContractAddress)\\n            .getDollarsInBNB(commissionInDollars);\\n        require(_amount <= 10, \\\"Amount must be < 10\\\");\\n        require(\\n            msg.value >= ((gasToMinter * _amount) + commissionInBNB),\\n            \\\"Not enough gas\\\"\\n        );\\n        payable(minterWalletAddress).transfer(gasToMinter * _amount);\\n        payable(commissionWalletAddress).transfer(commissionInBNB);\\n        payable(msg.sender).transfer(\\n            msg.value - ((gasToMinter * _amount) + commissionInBNB)\\n        );\\n\\n        require(\\n            IERC20Upgradeable(CWOLFContractAddress).allowance(\\n                msg.sender,\\n                address(this)\\n            ) >= boxPriceCWOLFInDollars,\\n            \\\"Not enough allowance\\\"\\n        );\\n\\n        uint256 amountCWOLF = Variables(VariablesContractAddress)\\n            .getDollarsInCWOLF(boxPriceCWOLFInDollars) * _amount;\\n\\n        IERC20Upgradeable(CWOLFContractAddress).transferFrom(\\n            msg.sender,\\n            rewardsPoolAddress,\\n            amountCWOLF\\n        );\\n\\n        for (uint256 index = 0; index < _amount; index++) {\\n            mint(msg.sender);\\n        }\\n\\n        return true;\\n    }\\n\\n    function mint(address _to) internal returns (uint256) {\\n        uint256 tokenId = totalSupply();\\n        _safeMint(_to, tokenId);\\n        emit MintedNFT(_to, tokenId);\\n        return tokenId;\\n    }\\n\\n    function calculateGasAndCommissions(uint8 _amount)\\n        public\\n        view\\n        returns (uint256[3] memory)\\n    {\\n        uint256 commissionInBNB = Variables(VariablesContractAddress)\\n            .getDollarsInBNB(commissionInDollars);\\n\\n        uint256[3] memory commissions;\\n        commissions[0] = gasToMinter * _amount;\\n        commissions[1] = commissionInBNB * _amount;\\n        commissions[2] = ((gasToMinter * _amount) +\\n            (commissionInBNB * _amount));\\n        return commissions;\\n    }\\n\\n    function burnMaterial(uint256 _tokenId) public returns (bool) {\\n        require(ownerOf(_tokenId) == msg.sender, \\\"Owner of MaterialNFT failed\\\");\\n\\n        bool isUsed = WolfPacksNFT(WolfPackNFTContractAddress).materialsUsed(\\n            _tokenId\\n        );\\n        require(isUsed == false, \\\"Material cannot be burned during its use\\\");\\n\\n        safeTransferFrom(msg.sender, rewardsPoolAddress, _tokenId);\\n\\n        uint256 amountCWOLF = Variables(VariablesContractAddress)\\n            .getDollarsInCWOLF(boxPriceCWOLFInDollars);\\n\\n        uint256 amountToReturn = (amountCWOLF * 2000) / 10000;\\n\\n        IERC20Upgradeable(CWOLFContractAddress).transferFrom(\\n            rewardsPoolAddress,\\n            msg.sender,\\n            amountToReturn\\n        );\\n\\n        return true;\\n    }\\n\\n    function burnMultipleMaterials(uint256[] memory _materialsId)\\n        public\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < _materialsId.length; i++) {\\n            burnMaterial(_materialsId[i]);\\n        }\\n        return true;\\n    }\\n\\n    function getMaterialSlots(uint256 _tokenId) public view returns (uint256) {\\n        return slots[_tokenId];\\n    }\\n\\n    function generateValuesMaterials(uint256[] memory _tokenIds, bytes32 _seed)\\n        external\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\\n            uint256 tokenId = _tokenIds[index];\\n\\n            require(generated[tokenId] == false, \\\"NFT yet generated\\\");\\n\\n            require(tokenId != 0, \\\"Not allowed\\\");\\n            require(\\n                msg.sender == owner() ||\\n                    msg.sender == minterWalletAddress ||\\n                    msg.sender == minterWalletAddress2 ||\\n                    msg.sender == minterWalletAddress3 ||\\n                    msg.sender == minterWalletAddress4,\\n                \\\"Not allowed\\\"\\n            );\\n            require(_exists(tokenId), \\\"Token does not exist\\\");\\n\\n            uint256 random = Random.randomMinMax(\\n                keccak256(abi.encodePacked(_seed, index)),\\n                0,\\n                100\\n            );\\n\\n            uint256 randomSlots;\\n            if (random < materialsProbabilities[0]) {\\n                randomSlots = 1;\\n            } else if (\\n                random >= materialsProbabilities[0] &&\\n                random < materialsProbabilities[1]\\n            ) {\\n                randomSlots = 2;\\n            } else if (\\n                random >= materialsProbabilities[1] &&\\n                random < materialsProbabilities[2]\\n            ) {\\n                randomSlots = 3;\\n            } else if (\\n                random >= materialsProbabilities[2] &&\\n                random < materialsProbabilities[3]\\n            ) {\\n                randomSlots = 4;\\n            } else if (\\n                random >= materialsProbabilities[3] &&\\n                random < materialsProbabilities[4]\\n            ) {\\n                randomSlots = 5;\\n            } else if (\\n                random >= materialsProbabilities[4] &&\\n                random <= materialsProbabilities[5]\\n            ) {\\n                randomSlots = 6;\\n            }\\n\\n            slots[tokenId] = randomSlots;\\n            generated[tokenId] = true;\\n\\n            emit GeneratedNFT(tokenId);\\n        }\\n        return true;\\n    }\\n\\n    function changeMaterialsProbabilities(uint256[] memory _newArray)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(_newArray.length == 6, \\\"Array length must be 6\\\");\\n        materialsProbabilities = _newArray;\\n        return true;\\n    }\\n\\n    function walletOfOwner(address _owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 tokenCount = balanceOf(_owner);\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\n        for (uint256 i = 0; i < tokenCount; i++) {\\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokensId;\\n    }\\n\\n    function changeBaseTokenURI(string memory newBaseTokenURI)\\n        external\\n        onlyOwner\\n    {\\n        strBaseTokenURI = newBaseTokenURI;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return strBaseTokenURI;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\n        return string(abi.encodePacked(_baseURI(), _tokenId.toString()));\\n    }\\n\\n    function pause() external onlyOwner returns (bool) {\\n        _pause();\\n        return true;\\n    }\\n\\n    function unpause() external onlyOwner returns (bool) {\\n        _unpause();\\n        return true;\\n    }\\n\\n    function changeCWOLFContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        CWOLFContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeRewardsPoolAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        rewardsPoolAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeboxPriceCWOLFInDollars(uint256 _newPrice)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        boxPriceCWOLFInDollars = _newPrice;\\n        return true;\\n    }\\n\\n    function changeGasToMinter(uint256 _newValue)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        gasToMinter = _newValue;\\n        return true;\\n    }\\n\\n    function changeCommissionInDollars(uint256 _newValue)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        commissionInDollars = _newValue;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet2(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress2 = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet3(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress3 = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet4(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress4 = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddressCommissionWallet(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        commissionWalletAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeWolfPackNFTContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        WolfPackNFTContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeMarketplaceContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        marketPlaceAddress = _newAddress;\\n        return true;\\n        \\n    }\\n\\n    /*\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(_from, _to, _tokenId);\\n\\n        // If the token is used in wolfPack, can not be tranferred\\n        if (WolfPackNFTContractAddress != address(0)) {\\n            bool isUsed = WolfPacksNFT(WolfPackNFTContractAddress)\\n                .materialsUsed(_tokenId);\\n\\n            require(isUsed == false, \\\"Material in WolfPack\\\");\\n        }\\n        if (\\n            _from != address(0) &&\\n            _to != address(0) &&\\n            (msg.sender != marketPlaceAddress || _to != rewardsPoolAddress)\\n        ) {\\n            revert(\\\"Only CW MarketPlace allowed\\\");\\n        }\\n    }\\n    */\\n}\\n\",\"keccak256\":\"0xd43cba4e0f2f4b18a152abde3c1249af938abe9451f8b8d69b937ffb7b95cf1a\",\"license\":\"MIT\"},\"contracts/Random.sol\":{\"content\":\"/*\\nCRYPTOWOLF\\nWeb: https://cryptowolf.finance\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Random {\\n    function randomMinMax(\\n        bytes32 _seed,\\n        uint256 _min,\\n        uint256 _max\\n    ) internal pure returns (uint256) {\\n        uint256 diff = _max - _min + 1;\\n\\n        uint256 seed = uint256(keccak256(abi.encode(_seed))) % diff;\\n\\n        return seed + _min;\\n    }\\n}\\n\",\"keccak256\":\"0x9976ae7479b85f0bc675efc1088c5b684d57721893c756c466a3094c98f7c6c1\",\"license\":\"MIT\"},\"contracts/Variables.sol\":{\"content\":\"/*\\nCRYPTOWOLF\\nWeb: https://cryptowolf.finance\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract Variables is OwnableUpgradeable {\\n    bool public isInitialized;\\n    uint256 public priceCWOLF;\\n    uint256 public priceBNB;\\n    address public minterWalletAddress;\\n\\n    event PriceCWOLFChanged(uint256 newPrice);\\n    event PriceBNBChanged(uint256 newPrice);\\n    event PriceCWOLFAndBNBChanged(uint256 _newPriceCWOLF, uint256 _newPriceBNB);\\n\\n    constructor() initializer {}\\n\\n    function initialize(address minterWalletAddress_) public initializer {\\n        __Ownable_init();\\n        priceCWOLF = 8 * 1e17;\\n        priceBNB = 500000000000000000000;\\n        minterWalletAddress = minterWalletAddress_;\\n        isInitialized = true;\\n    }\\n\\n    function setCWolfPriceInDollars(uint256 _newPrice) external {\\n        require(\\n            msg.sender == owner() || msg.sender == minterWalletAddress,\\n            \\\"Not allowed\\\"\\n        );\\n        priceCWOLF = _newPrice;\\n        emit PriceCWOLFChanged(_newPrice);\\n    }\\n\\n    function getDollarsInCWOLF(uint256 _amount) // INPUT in DOLLARS\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return (_amount * 1e18) / priceCWOLF;\\n    }\\n\\n    function setBNBPriceInDollars(uint256 _newPrice) external {\\n        require(\\n            msg.sender == owner() || msg.sender == minterWalletAddress,\\n            \\\"Not allowed\\\"\\n        );\\n        priceBNB = _newPrice;\\n        emit PriceBNBChanged(_newPrice);\\n    }\\n\\n    function getDollarsInBNB(uint256 _amount) external view returns (uint256) { // INPUT in BNB\\n        return (_amount * 1e18) / priceBNB;\\n    }\\n\\n    function setCWOLFAndBNBPriceInDollars(\\n        uint256 _newPriceCWOLF,\\n        uint256 _newPriceBNB\\n    ) external {\\n        require(\\n            msg.sender == owner() || msg.sender == minterWalletAddress,\\n            \\\"Not allowed\\\"\\n        );\\n        priceCWOLF = _newPriceCWOLF;\\n        priceBNB = _newPriceBNB;\\n        emit PriceCWOLFAndBNBChanged(_newPriceCWOLF, _newPriceBNB);\\n    }\\n\\n    function changeAddressMinterWallet(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress = _newAddress;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x3117a73177a1583c9826fb5571cb7dfb8ca318983c2e383fe30a59add30a08ce\",\"license\":\"MIT\"},\"contracts/WolfPacksNFT.sol\":{\"content\":\"/*\\nCRYPTOWOLF\\nWeb: https://cryptowolf.finance\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./WolfsNFT.sol\\\";\\nimport \\\"./MaterialsNFT.sol\\\";\\nimport \\\"./HuntingNFT.sol\\\";\\nimport \\\"./Variables.sol\\\";\\nimport \\\"./DateTimeLibrary.sol\\\";\\n\\ncontract WolfPacksNFT is\\n    Initializable,\\n    ERC721EnumerableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    bool public isInitialized;\\n    uint256 public addWolfOrMaterialCWOLFInDollar;\\n    uint256 public gasToMinter;\\n    uint256 public energyPointPriceInCWOLF;\\n    uint256 public commissionInDollar;\\n    address public rewardsPoolAddress;\\n    address public commissionWalletAddress;\\n    address public CWOLFContractAddress;\\n    address public HuntingNFTContractAddress;\\n    address public WolfsNFTContractAddress;\\n    address public MaterialsNFTContractAddress;\\n    address public VariablesContractAddress;\\n    address public minterWalletAddress;\\n    string public strBaseTokenURI;\\n\\n    mapping(uint256 => uint256[]) public wolfsInWolfPack;\\n    mapping(uint256 => uint256[]) public materialsInWolfPack;\\n\\n    mapping(uint256 => bool) public wolfsUsed;\\n    mapping(uint256 => bool) public materialsUsed;\\n    mapping(uint256 => uint256) public wolfPackLife;\\n    mapping(uint256 => uint256) public wolfPackEnergy;\\n    mapping(uint256 => uint256) public wolfPackLinkDays;\\n    mapping(uint256 => uint256) public wolfPackLinkDate;\\n    mapping(uint256 => uint256) public lastHunting;\\n    mapping(uint256 => bool) configurationLinkDays;\\n\\n    bool public isPromoActive;\\n    mapping(uint256 => bool) public wolfPackInPromo;\\n    uint256 public dateLastPromoActivation;\\n    uint256 public daysOfPromo;\\n    uint256 public linkCommission;\\n    uint256 public energyCommission;\\n    address public marketPlaceAddress;\\n    address public claimContractAddress;\\n\\n    event MintedNFT(address indexed _to, uint256 indexed _id);\\n    event IncreasedEnergy(uint256 indexed _wolfPackId, uint256 indexed _amount);\\n    event DecreasedEnergy(uint256 indexed _wolfPackId, uint256 indexed _amount);\\n    event IncreasedLink(uint256 indexed _wolfPackId, uint256 indexed _amount);\\n    event DecreasedLink(uint256 indexed _wolfPackId, uint256 indexed _amount);\\n    event IncreasedLife(uint256 indexed _wolfPackId, uint256 indexed _amount);\\n    event DecreasedLife(uint256 indexed _wolfPackId, uint256 indexed _amount);\\n\\n    constructor() initializer {}\\n\\n    function initialize(\\n        address CWOLFContractAddress_,\\n        address rewardsPoolAddress_,\\n        address minterWalletAddress_,\\n        address WolfsNFTContractAddress_,\\n        address MaterialsNFTContractAddress_,\\n        address VariablesContractAddress_,\\n        address commissionWalletAddress_\\n    ) public initializer {\\n        __ERC721_init(\\\"WolfPacksNFT\\\", \\\"WolfPacksNFT\\\");\\n        __Ownable_init();\\n        isInitialized = true;\\n        CWOLFContractAddress = CWOLFContractAddress_;\\n        rewardsPoolAddress = rewardsPoolAddress_;\\n        gasToMinter = 1000000000000000;\\n        commissionInDollar = 250000000000000000;\\n        energyPointPriceInCWOLF = 1000000000000000000;\\n        minterWalletAddress = minterWalletAddress_;\\n        commissionWalletAddress = commissionWalletAddress_;\\n        WolfsNFTContractAddress = WolfsNFTContractAddress_;\\n        MaterialsNFTContractAddress = MaterialsNFTContractAddress_;\\n        VariablesContractAddress = VariablesContractAddress_;\\n        addWolfOrMaterialCWOLFInDollar = 250000000000000000;\\n        configurationLinkDays[1] = true;\\n        configurationLinkDays[3] = true;\\n        configurationLinkDays[14] = true;\\n        configurationLinkDays[30] = true;\\n\\n        // First WOLFPACK must be 0 capacity\\n        _safeMint(minterWalletAddress_, 0);\\n\\n        // Uncomment if we want deploy paused\\n        //_pause();\\n    }\\n\\n    function mintOwner(address _to) external onlyOwner returns (uint256) {\\n        return mint(_to);\\n    }\\n\\n    function mintWithCWOLF()\\n        public\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        uint256 commissionInBNB = Variables(VariablesContractAddress)\\n            .getDollarsInBNB(commissionInDollar);\\n        require(msg.value >= (gasToMinter + commissionInBNB), \\\"Not enough gas\\\");\\n        payable(minterWalletAddress).transfer(gasToMinter);\\n        payable(commissionWalletAddress).transfer(commissionInBNB);\\n        payable(msg.sender).transfer(\\n            msg.value - (gasToMinter + commissionInBNB)\\n        );\\n\\n        uint256 id = mint(msg.sender);\\n\\n        uint256 _days = DateTimeLibrary.diffDays(\\n            dateLastPromoActivation,\\n            block.timestamp\\n        );\\n        if (isPromoActive && _days <= daysOfPromo) {\\n            wolfPackInPromo[id] = true;\\n        }\\n\\n        return id;\\n    }\\n\\n    function mint(address _to) internal returns (uint256) {\\n        uint256 tokenId = totalSupply();\\n        _safeMint(_to, tokenId);\\n        emit MintedNFT(_to, tokenId);\\n        return tokenId;\\n    }\\n\\n    function createWolfPackAndAddWolfsAndMaterials(\\n        uint256[] memory _materialsIds,\\n        uint256[] memory _wolfsIds\\n    ) external payable returns (bool) {\\n        uint256 idWolfPack = mintWithCWOLF();\\n        addMultipleMaterialsToWolfPack(idWolfPack, _materialsIds);\\n        addMultipleWolfsToWolfPack(idWolfPack, _wolfsIds);\\n        return true;\\n    }\\n\\n    function calculateInitialWolfPackLife(uint256 _wolfPackId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 initialLife;\\n        for (uint256 i = 0; i < wolfsInWolfPack[_wolfPackId].length; i++) {\\n            initialLife =\\n                initialLife +\\n                WolfsNFT(WolfsNFTContractAddress).getWolfProperties(\\n                    wolfsInWolfPack[_wolfPackId][i]\\n                )[3] +\\n                WolfsNFT(WolfsNFTContractAddress).getWolfProperties(\\n                    wolfsInWolfPack[_wolfPackId][i]\\n                )[4];\\n        }\\n        return initialLife;\\n    }\\n\\n    function addWolfToWolfPack(uint256 _wolfPackId, uint256 _wolfId)\\n        public\\n        returns (bool)\\n    {\\n        require(ownerOf(_wolfPackId) == msg.sender, \\\"WolfPack property failed\\\"); // WolfPack must be property of msg.sender\\n\\n        uint256 limitTimestamp = DateTimeLibrary.addDays(\\n            wolfPackLinkDate[_wolfPackId],\\n            wolfPackLinkDays[_wolfPackId]\\n        );\\n        require(\\n            block.timestamp >= limitTimestamp ||\\n                wolfPackLinkDays[_wolfPackId] == 0,\\n            \\\"Bond is greater than 0\\\"\\n        );\\n\\n        require(\\n            WolfsNFT(WolfsNFTContractAddress).ownerOf(_wolfId) == msg.sender,\\n            \\\"Wolf property failed\\\"\\n        );\\n        require(\\n            getTotalSlotsAvailableInWolfPack(_wolfPackId) > 0,\\n            \\\"Max capacity reached\\\"\\n        );\\n        require(wolfsUsed[_wolfId] == false, \\\"Wolf is used in other wolf pack\\\");\\n\\n        wolfsUsed[_wolfId] = true;\\n        wolfsInWolfPack[_wolfPackId].push(_wolfId);\\n        wolfPackLife[_wolfPackId] =\\n            wolfPackLife[_wolfPackId] +\\n            WolfsNFT(WolfsNFTContractAddress).getWolfProperties(_wolfId)[3] +\\n            WolfsNFT(WolfsNFTContractAddress).getWolfProperties(_wolfId)[4];\\n\\n        uint256 amountCWOLF = Variables(VariablesContractAddress)\\n            .getDollarsInCWOLF(addWolfOrMaterialCWOLFInDollar);\\n\\n        require(\\n            IERC20Upgradeable(CWOLFContractAddress).allowance(\\n                msg.sender,\\n                address(this)\\n            ) >= amountCWOLF,\\n            \\\"Not enough allowance\\\"\\n        );\\n\\n        IERC20Upgradeable(CWOLFContractAddress).transferFrom(\\n            msg.sender,\\n            rewardsPoolAddress,\\n            amountCWOLF\\n        );\\n        return true;\\n    }\\n\\n    function addMultipleWolfsToWolfPack(\\n        uint256 _wolfPackId,\\n        uint256[] memory _wolfsIds\\n    ) public returns (bool) {\\n        uint256 initialLife = calculateInitialWolfPackLife(_wolfPackId);\\n        require(\\n            wolfPackLife[_wolfPackId] >= initialLife,\\n            \\\"Life is less than initial\\\"\\n        );\\n\\n        for (uint256 index = 0; index < _wolfsIds.length; index++) {\\n            addWolfToWolfPack(_wolfPackId, _wolfsIds[index]);\\n        }\\n        return true;\\n    }\\n\\n    function addMaterialToWolfPack(uint256 _wolfPackId, uint256 _materialId)\\n        public\\n        returns (bool)\\n    {\\n        require(ownerOf(_wolfPackId) == msg.sender, \\\"WolfPack property failed\\\"); // WolfPack must be property of msg.sender\\n        require(\\n            MaterialsNFT(MaterialsNFTContractAddress).ownerOf(_materialId) ==\\n                msg.sender,\\n            \\\"Material property failed\\\"\\n        );\\n        require(\\n            getTotalMaterialsInWolfPack(_wolfPackId) < 20,\\n            \\\"Limit 20 reached\\\"\\n        );\\n        require(\\n            materialsUsed[_materialId] == false,\\n            \\\"Material is used in other wolf pack\\\"\\n        );\\n\\n        materialsInWolfPack[_wolfPackId].push(_materialId);\\n        materialsUsed[_materialId] = true;\\n\\n        uint256 amountCWOLF = Variables(VariablesContractAddress)\\n            .getDollarsInCWOLF(addWolfOrMaterialCWOLFInDollar);\\n\\n        require(\\n            IERC20Upgradeable(CWOLFContractAddress).allowance(\\n                msg.sender,\\n                address(this)\\n            ) >= amountCWOLF,\\n            \\\"Not enough allowance\\\"\\n        );\\n\\n        IERC20Upgradeable(CWOLFContractAddress).transferFrom(\\n            msg.sender,\\n            rewardsPoolAddress,\\n            amountCWOLF\\n        );\\n        return true;\\n    }\\n\\n    function addMultipleMaterialsToWolfPack(\\n        uint256 _wolfPackId,\\n        uint256[] memory _materialsIds\\n    ) public returns (bool) {\\n        for (uint256 index = 0; index < _materialsIds.length; index++) {\\n            addMaterialToWolfPack(_wolfPackId, _materialsIds[index]);\\n        }\\n        return true;\\n    }\\n\\n    function addMultipleMaterialsAndWolfsToWolfPack(\\n        uint256 _wolfPackId,\\n        uint256[] memory _materialsIds,\\n        uint256[] memory _wolfsIds\\n    ) external returns (bool) {\\n        for (uint256 index = 0; index < _materialsIds.length; index++) {\\n            addMaterialToWolfPack(_wolfPackId, _materialsIds[index]);\\n        }\\n\\n        for (uint256 index = 0; index < _wolfsIds.length; index++) {\\n            addWolfToWolfPack(_wolfPackId, _wolfsIds[index]);\\n        }\\n\\n        return true;\\n    }\\n\\n    function destroyWolfPack(uint256 _wolfPackId) external returns (bool) {\\n        require(ownerOf(_wolfPackId) == msg.sender, \\\"WolfPack property failed\\\"); // WolfPack must be property of msg.sender\\n\\n        uint256 initialLife = calculateInitialWolfPackLife(_wolfPackId);\\n        require(\\n            wolfPackLife[_wolfPackId] >= initialLife,\\n            \\\"Life is less than initial\\\"\\n        );\\n\\n        uint256 diffTs = DateTimeLibrary.diffHours(\\n            lastHunting[_wolfPackId],\\n            block.timestamp\\n        );\\n        require(diffTs >= 24, \\\"Less than 24 hours from last hunting\\\");\\n\\n        // Delete used Wolfs from mapping\\n        uint256[] memory wolfsIdsInWolfPack = wolfsInWolfPack[_wolfPackId];\\n        for (uint256 index = 0; index < wolfsIdsInWolfPack.length; index++) {\\n            wolfsUsed[wolfsIdsInWolfPack[index]] = false;\\n        }\\n\\n        // Delete array of WOLFs from mapping\\n        delete wolfsInWolfPack[_wolfPackId];\\n\\n        // Delete used Materials from mapping\\n        uint256[] memory materialsIdsInWolfPack = materialsInWolfPack[\\n            _wolfPackId\\n        ];\\n        for (\\n            uint256 index = 0;\\n            index < materialsIdsInWolfPack.length;\\n            index++\\n        ) {\\n            materialsUsed[materialsIdsInWolfPack[index]] = false;\\n        }\\n\\n        // Delete array of Materials from mapping\\n        delete materialsInWolfPack[_wolfPackId];\\n\\n        wolfPackInPromo[_wolfPackId] = false;\\n        safeTransferFrom(msg.sender, rewardsPoolAddress, _wolfPackId);\\n\\n        return true;\\n    }\\n\\n    function buyEnergy(uint256 _wolfPackId, uint256 _amountCWOLF)\\n        external\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(ownerOf(_wolfPackId) == msg.sender, \\\"Owner of WolfPack failed\\\");\\n\\n        uint256 energyCommissionInBNB = Variables(VariablesContractAddress)\\n            .getDollarsInBNB(energyCommission);\\n        require(msg.value >= energyCommissionInBNB, \\\"Not enough value\\\");\\n        payable(commissionWalletAddress).transfer(energyCommissionInBNB);\\n        payable(msg.sender).transfer(msg.value - energyCommissionInBNB);\\n\\n        require(\\n            IERC20Upgradeable(CWOLFContractAddress).allowance(\\n                msg.sender,\\n                address(this)\\n            ) >= _amountCWOLF,\\n            \\\"Not enough allowance\\\"\\n        );\\n\\n        uint256 _amountInDollar = (Variables(VariablesContractAddress)\\n            .priceCWOLF() * _amountCWOLF) / 1e18;\\n\\n        IERC20Upgradeable(CWOLFContractAddress).transferFrom(\\n            msg.sender,\\n            rewardsPoolAddress,\\n            _amountCWOLF\\n        );\\n\\n        wolfPackEnergy[_wolfPackId] =\\n            wolfPackEnergy[_wolfPackId] +\\n            _amountInDollar;\\n        emit IncreasedEnergy(_wolfPackId, _amountInDollar);\\n    }\\n\\n    function increaseEnergy(uint256 _wolfPackId, uint256 _amountToIncrease)\\n        external\\n    {\\n        require(\\n            msg.sender == claimContractAddress,\\n            \\\"Caller is not Claim contract\\\"\\n        );\\n        wolfPackEnergy[_wolfPackId] =\\n            wolfPackEnergy[_wolfPackId] +\\n            _amountToIncrease;\\n        emit IncreasedEnergy(_wolfPackId, _amountToIncrease);\\n    }\\n\\n    function decreaseEnergy(uint256 _wolfPackId, uint256 _amountToDecrease)\\n        external\\n    {\\n        require(\\n            msg.sender == HuntingNFTContractAddress,\\n            \\\"Caller is not Hunting contract\\\"\\n        );\\n        require(\\n            wolfPackEnergy[_wolfPackId] >= _amountToDecrease,\\n            \\\"Amount to decrease greater than energy\\\"\\n        );\\n        wolfPackEnergy[_wolfPackId] =\\n            wolfPackEnergy[_wolfPackId] -\\n            _amountToDecrease;\\n        emit DecreasedEnergy(_wolfPackId, _amountToDecrease);\\n    }\\n\\n    function decreaseWolfPackLife(\\n        uint256 _wolfPackId,\\n        uint256 _amountToDecrease\\n    ) external {\\n        require(\\n            msg.sender == HuntingNFTContractAddress,\\n            \\\"Caller is not Hunting contract\\\"\\n        );\\n        if (wolfPackLife[_wolfPackId] > _amountToDecrease) {\\n            wolfPackLife[_wolfPackId] =\\n                wolfPackLife[_wolfPackId] -\\n                _amountToDecrease;\\n            emit DecreasedLife(_wolfPackId, _amountToDecrease);\\n        } else {\\n            wolfPackLife[_wolfPackId] = 0;\\n            emit DecreasedLife(_wolfPackId, 0);\\n        }\\n    }\\n\\n    function increaseWolfPackLife(\\n        uint256 _wolfPackId,\\n        uint256 _amountToIncrease\\n    ) external {\\n        // TODO: Cambiar a inventory contract\\n        require(\\n            msg.sender == HuntingNFTContractAddress,\\n            \\\"Caller is not Hunting contract\\\"\\n        );\\n        wolfPackLife[_wolfPackId] =\\n            wolfPackLife[_wolfPackId] +\\n            _amountToIncrease;\\n        emit IncreasedLife(_wolfPackId, _amountToIncrease);\\n    }\\n\\n    function setDaysOfPromo(uint256 _newDaysOfPromo)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        daysOfPromo = _newDaysOfPromo;\\n        return true;\\n    }\\n\\n    function activateDeactivatePromo() external onlyOwner returns (bool) {\\n        isPromoActive = !isPromoActive;\\n        dateLastPromoActivation = dateLastPromoActivation == 0\\n            ? block.timestamp\\n            : 0;\\n        return true;\\n    }\\n\\n    function setPromoStatusForWolfPack(uint256 _wolfPackId, bool _status)\\n        external\\n        returns (bool)\\n    {\\n        require(\\n            msg.sender == owner() || msg.sender == HuntingNFTContractAddress\\n        );\\n        wolfPackInPromo[_wolfPackId] = _status;\\n        return true;\\n    }\\n\\n    function checkWolfPackStatusPromo(uint256 _wolfPackId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return wolfPackInPromo[_wolfPackId];\\n    }\\n\\n    // Checks the status of the wolfpack life: > 0 is alive and true, otherwise dead and false\\n    function checkWolfPackStatusDeadOrAlive(uint256 _wolfPackId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return wolfPackLife[_wolfPackId] > 0;\\n    }\\n\\n    function buyWolfPackLink(uint256 _wolfPackId, uint256 _amountOfDays)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        require(ownerOf(_wolfPackId) == msg.sender, \\\"Owner of WolfPack failed\\\");\\n        require(\\n            configurationLinkDays[_amountOfDays] == true,\\n            \\\"Error: Amount of days incorrect\\\"\\n        );\\n\\n        uint256 linkCommissionInBNB = Variables(VariablesContractAddress)\\n            .getDollarsInBNB(linkCommission);\\n        require(msg.value >= linkCommissionInBNB, \\\"Not enough value\\\");\\n        payable(commissionWalletAddress).transfer(linkCommissionInBNB);\\n        payable(msg.sender).transfer(msg.value - linkCommissionInBNB);\\n\\n        uint256 totalDollars = ((_amountOfDays * 10**18) * 5000) / 10000;\\n        uint256 amountInCWOLF = Variables(VariablesContractAddress)\\n            .getDollarsInCWOLF(\\n                totalDollars * wolfsInWolfPack[_wolfPackId].length\\n            );\\n\\n        require(\\n            IERC20Upgradeable(CWOLFContractAddress).allowance(\\n                msg.sender,\\n                address(this)\\n            ) >= amountInCWOLF,\\n            \\\"Not enough allowance\\\"\\n        );\\n\\n        IERC20Upgradeable(CWOLFContractAddress).transferFrom(\\n            msg.sender,\\n            rewardsPoolAddress,\\n            amountInCWOLF\\n        );\\n\\n        wolfPackLinkDays[_wolfPackId] =\\n            wolfPackLinkDays[_wolfPackId] +\\n            _amountOfDays;\\n\\n        emit IncreasedLink(_wolfPackId, wolfPackLinkDays[_wolfPackId]);\\n    }\\n\\n    function decreaseWolfPackLink(\\n        uint256 _wolfPackId,\\n        uint256 _amountToDecrease\\n    ) public {\\n        require(\\n            msg.sender == HuntingNFTContractAddress,\\n            \\\"Caller is not Hunting contract\\\"\\n        );\\n        wolfPackLinkDays[_wolfPackId] =\\n            wolfPackLinkDays[_wolfPackId] -\\n            _amountToDecrease;\\n        emit DecreasedLink(_wolfPackId, _amountToDecrease);\\n    }\\n\\n    function increaseWolfPackLink(\\n        uint256 _wolfPackId,\\n        uint256 _amountToIncrease\\n    ) public {\\n        require(\\n            msg.sender == claimContractAddress,\\n            \\\"Caller is not Claim contract\\\"\\n        );\\n        wolfPackLinkDays[_wolfPackId] =\\n            wolfPackLinkDays[_wolfPackId] +\\n            _amountToIncrease;\\n        emit IncreasedLink(_wolfPackId, _amountToIncrease);\\n    }\\n\\n    function getWolfPackLength(uint256 _wolfPackId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return wolfsInWolfPack[_wolfPackId].length;\\n    }\\n\\n    function checkWolfPackLink(uint256 _wolfPackId) public view returns (bool) {\\n        return wolfPackLinkDays[_wolfPackId] > 0;\\n    }\\n\\n    function calculateGasAndCommissions()\\n        public\\n        view\\n        returns (uint256[3] memory)\\n    {\\n        uint256 commissionInBNB = Variables(VariablesContractAddress)\\n            .getDollarsInBNB(commissionInDollar);\\n\\n        uint256[3] memory commissions;\\n        commissions[0] = gasToMinter;\\n        commissions[1] = commissionInBNB;\\n        commissions[2] = gasToMinter + commissionInBNB;\\n        return commissions;\\n    }\\n\\n    function getTotalMaterialsInWolfPack(uint256 _wolfPackId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return materialsInWolfPack[_wolfPackId].length;\\n    }\\n\\n    function getTotalSlotsAvailableInWolfPack(uint256 _wolfPackId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory wolfPack = materialsInWolfPack[_wolfPackId];\\n\\n        // Capacity of WolfPack\\n        uint256 totalCapacity;\\n        for (uint256 index = 0; index < wolfPack.length; index++) {\\n            uint256 wolfTokenId = wolfPack[index];\\n            uint256 materialCapacity = MaterialsNFT(MaterialsNFTContractAddress)\\n                .slots(wolfTokenId);\\n            totalCapacity = totalCapacity + materialCapacity;\\n        }\\n\\n        return totalCapacity - wolfsInWolfPack[_wolfPackId].length;\\n    }\\n\\n    function getTotalSlotsInWolfPack(uint256 _wolfPackId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory wolfPack = materialsInWolfPack[_wolfPackId];\\n\\n        // Capacity of WolfPack\\n        uint256 totalCapacity;\\n        for (uint256 index = 0; index < wolfPack.length; index++) {\\n            uint256 wolfTokenId = wolfPack[index];\\n            uint256 materialCapacity = MaterialsNFT(MaterialsNFTContractAddress)\\n                .slots(wolfTokenId);\\n            totalCapacity = totalCapacity + materialCapacity;\\n        }\\n\\n        return totalCapacity;\\n    }\\n\\n    function pointsOfWolfPack(uint256 _wolfPackId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(_exists(_wolfPackId), \\\"WolfPack not exist\\\"); // WolfPack must exist\\n\\n        uint256[] memory wolfsIdsInWolfPack = wolfsInWolfPack[_wolfPackId];\\n\\n        uint256 totalPoints;\\n        for (uint256 index = 0; index < wolfsIdsInWolfPack.length; index++) {\\n            totalPoints =\\n                totalPoints +\\n                WolfsNFT(WolfsNFTContractAddress).getWolfProperties(\\n                    wolfsIdsInWolfPack[index]\\n                )[3];\\n        }\\n\\n        return totalPoints;\\n    }\\n\\n    function setLastHunting(uint256 _wolfPackId, uint256 _lastHunting)\\n        external\\n        returns (bool)\\n    {\\n        // Restricted access only for Hunting Contract\\n        require(msg.sender == HuntingNFTContractAddress);\\n        lastHunting[_wolfPackId] = _lastHunting;\\n        return true;\\n    }\\n\\n    function walletOfOwner(address _owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 tokenCount = balanceOf(_owner);\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\n        for (uint256 i = 0; i < tokenCount; i++) {\\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokensId;\\n    }\\n\\n    function changeBaseTokenURI(string memory newBaseTokenURI)\\n        external\\n        onlyOwner\\n    {\\n        strBaseTokenURI = newBaseTokenURI;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return strBaseTokenURI;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\n        return string(abi.encodePacked(_baseURI(), _tokenId.toString()));\\n    }\\n\\n    function pause() external onlyOwner returns (bool) {\\n        _pause();\\n        return true;\\n    }\\n\\n    function unpause() external onlyOwner returns (bool) {\\n        _unpause();\\n        return true;\\n    }\\n\\n    /*\\n    function changeRewardsPoolAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        rewardsPoolAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddWolfOrMaterialCWOLFInDollar(uint256 _newPrice)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        addWolfOrMaterialCWOLFInDollar = _newPrice;\\n        return true;\\n    }\\n\\n    function changeCWOLFContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        CWOLFContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeWolfsNFTContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        WolfsNFTContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeMaterialsNFTContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        MaterialsNFTContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeGasToMinter(uint256 _newValue)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        gasToMinter = _newValue;\\n        return true;\\n    }\\n\\n    function changeCommissionInDollar(uint256 _newValue)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        commissionInDollar = _newValue;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeHuntingNFTContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        HuntingNFTContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeLinkAndEnergyCommission(\\n        uint256 _newLinkCommission,\\n        uint256 _newEnergyCommission\\n    ) external onlyOwner returns (bool) {\\n        linkCommission = _newLinkCommission;\\n        energyCommission = _newEnergyCommission;\\n        return true;\\n    }\\n\\n    */\\n    function changeMarketplaceContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        marketPlaceAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeClaimContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        claimContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(_from, _to, _tokenId);\\n\\n        if (\\n            _from != address(0) &&\\n            _to != address(0) &&\\n            !(msg.sender == marketPlaceAddress || _to == rewardsPoolAddress)\\n        ) {\\n            revert(\\\"Only CW MarketPlace allowed\\\");\\n        }\\n    }\\n\\n    function getConfigurationLinkDays(uint256 _amountOfDays)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return configurationLinkDays[_amountOfDays];\\n    }\\n}\\n\",\"keccak256\":\"0x7564a2195398b99ab3fc148a0ab8675920547f8ba34c697c6b8fe5c413473f28\",\"license\":\"MIT\"},\"contracts/WolfsNFT.sol\":{\"content\":\"/*\\nCRYPTOWOLF\\nWeb: https://cryptowolf.finance\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./WolfsNFTHelper.sol\\\";\\nimport \\\"./Random.sol\\\";\\nimport \\\"./Variables.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./WolfPacksNFT.sol\\\";\\n\\ncontract WolfsNFT is\\n    Initializable,\\n    ERC721EnumerableUpgradeable,\\n    PausableUpgradeable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    bool public isInitialized;\\n    uint256 public boxPriceCWOLFInDollars;\\n    uint256 public gasToMinter;\\n    uint256 public commissionInDollars;\\n    address public rewardsPoolAddress;\\n    address public CWOLFContractAddress;\\n    address public wolfsNFTHelperContractAddress;\\n    address public VariablesContractAddress;\\n    address public minterWalletAddress;\\n    address public commissionWalletAddress;\\n    string public strBaseTokenURI;\\n\\n    mapping(uint256 => uint256) public breed;\\n    mapping(uint256 => uint256) public gender;\\n    mapping(uint256 => uint256) public level;\\n    mapping(uint256 => uint256) public attack;\\n    mapping(uint256 => uint256) public defense;\\n    mapping(uint256 => uint256) public lastHunt;\\n    mapping(uint256 => bool) public generated;\\n\\n    address public WolfPackNFTContractAddress;\\n    address public marketPlaceAddress;\\n\\n    address public minterWalletAddress2;\\n    address public minterWalletAddress3;\\n    address public minterWalletAddress4;\\n\\n    event MintedNFT(address indexed to, uint256 indexed id);\\n    event GeneratedNFT(uint256 indexed id);\\n\\n    constructor() initializer {}\\n\\n    function initialize(\\n        address wolfsNFTHelperContractAddress_,\\n        address CWOLFContractAddress_,\\n        address VariablesContractAddress_,\\n        address rewardsPoolAddress_,\\n        address minterWalletAddress_,\\n        address commissionWalletAddress_\\n    ) public initializer {\\n        __ERC721_init(\\\"WolfNFT\\\", \\\"WolfNFT\\\");\\n        __Ownable_init();\\n        wolfsNFTHelperContractAddress = wolfsNFTHelperContractAddress_;\\n        CWOLFContractAddress = CWOLFContractAddress_;\\n        VariablesContractAddress = VariablesContractAddress_;\\n        rewardsPoolAddress = rewardsPoolAddress_;\\n\\n        gasToMinter = 1000000000000000;\\n        commissionInDollars = 250000000000000000;\\n        minterWalletAddress = minterWalletAddress_;\\n        commissionWalletAddress = commissionWalletAddress_;\\n        boxPriceCWOLFInDollars = 10000000000000000000;\\n\\n        // First wolf minted with all to 0\\n        // If another contract points to it must be 0\\n        _safeMint(minterWalletAddress_, 0);\\n        isInitialized = true;\\n\\n        // Uncomment if we want deploy paused\\n        // _pause();\\n    }\\n\\n    function mintOwner(address _to) external onlyOwner returns (uint256) {\\n        return mint(_to);\\n    }\\n\\n    function mintWithCWOLF(uint8 _amount)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(_amount <= 10, \\\"Amount must be < 10\\\");\\n        uint256 commissionInBNB = Variables(VariablesContractAddress)\\n            .getDollarsInBNB(commissionInDollars);\\n        require(\\n            msg.value >=\\n                ((gasToMinter * _amount) + (commissionInBNB * _amount)),\\n            \\\"Not enough gas\\\"\\n        );\\n        payable(minterWalletAddress).transfer(gasToMinter * _amount);\\n        payable(commissionWalletAddress).transfer((commissionInBNB * _amount));\\n        payable(msg.sender).transfer(\\n            msg.value - ((gasToMinter * _amount) + (commissionInBNB * _amount))\\n        );\\n\\n        uint256 amountCWOLF = Variables(VariablesContractAddress)\\n            .getDollarsInCWOLF(boxPriceCWOLFInDollars) * _amount;\\n\\n        require(\\n            IERC20Upgradeable(CWOLFContractAddress).allowance(\\n                msg.sender,\\n                address(this)\\n            ) >= amountCWOLF,\\n            \\\"Not enough allowance\\\"\\n        );\\n\\n        IERC20Upgradeable(CWOLFContractAddress).transferFrom(\\n            msg.sender,\\n            rewardsPoolAddress,\\n            amountCWOLF\\n        );\\n\\n        for (uint256 index = 0; index < _amount; index++) {\\n            mint(msg.sender);\\n        }\\n\\n        return true;\\n    }\\n\\n    function mint(address _to) internal returns (uint256) {\\n        uint256 tokenId = totalSupply();\\n        _safeMint(_to, tokenId);\\n        emit MintedNFT(_to, tokenId);\\n        return tokenId;\\n    }\\n\\n    function calculateGasAndCommissions(uint8 _amount)\\n        public\\n        view\\n        returns (uint256[3] memory)\\n    {\\n        uint256 commissionInBNB = Variables(VariablesContractAddress)\\n            .getDollarsInBNB(commissionInDollars);\\n\\n        uint256[3] memory commissions;\\n        commissions[0] = gasToMinter * _amount;\\n        commissions[1] = commissionInBNB * _amount;\\n        commissions[2] = ((gasToMinter * _amount) +\\n            (commissionInBNB * _amount));\\n        return commissions;\\n    }\\n\\n    function burnWolf(uint256 _tokenId) public returns (bool) {\\n        require(ownerOf(_tokenId) == msg.sender, \\\"Owner of WolfNFT failed\\\");\\n        bool isUsed = WolfPacksNFT(WolfPackNFTContractAddress).wolfsUsed(\\n            _tokenId\\n        );\\n\\n        require(isUsed == false, \\\"Wolf cannot be burned during its use\\\");\\n\\n        safeTransferFrom(msg.sender, rewardsPoolAddress, _tokenId);\\n\\n        uint256 amountCWOLF = Variables(VariablesContractAddress)\\n            .getDollarsInCWOLF(boxPriceCWOLFInDollars);\\n\\n        uint256 amountToReturn = (amountCWOLF * 2000) / 10000;\\n\\n        IERC20Upgradeable(CWOLFContractAddress).transferFrom(\\n            rewardsPoolAddress,\\n            msg.sender,\\n            amountToReturn\\n        );\\n\\n        return true;\\n    }\\n\\n    function burnMultipleWolfs(uint256[] memory _wolfsId)\\n        public\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < _wolfsId.length; i++) {\\n            burnWolf(_wolfsId[i]);\\n        }\\n        return true;\\n    }\\n\\n    function getWolfProperties(uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\n        uint256[] memory properties = new uint256[](6);\\n\\n        properties[0] = breed[_tokenId];\\n        properties[1] = gender[_tokenId];\\n        properties[2] = level[_tokenId];\\n        properties[3] = attack[_tokenId];\\n        properties[4] = defense[_tokenId];\\n        properties[5] = lastHunt[_tokenId];\\n\\n        return properties;\\n    }\\n\\n    function generateValuesWolf(uint256[] memory _tokenIds, bytes32 _seed)\\n        external\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\\n            uint256 tokenId = _tokenIds[index];\\n\\n            require(generated[tokenId] == false, \\\"Wolf yet generated\\\");\\n            require(tokenId != 0, \\\"Not allowed\\\");\\n            require(\\n                msg.sender == owner() ||\\n                    msg.sender == minterWalletAddress ||\\n                    msg.sender == minterWalletAddress2 ||\\n                    msg.sender == minterWalletAddress3 ||\\n                    msg.sender == minterWalletAddress4,\\n                \\\"Not allowed\\\"\\n            );\\n            require(_exists(tokenId), \\\"Token does not exist\\\");\\n\\n            WolfsNFTHelper wolfNFTHelper = WolfsNFTHelper(\\n                wolfsNFTHelperContractAddress\\n            );\\n\\n            (\\n                uint256 breedGenerated,\\n                uint256 genderGenerated,\\n                uint256 levelGenerated,\\n                uint256 attackGenerated,\\n                uint256 defenseGenerated\\n            ) = wolfNFTHelper.generateWolf(\\n                    keccak256(abi.encodePacked(_seed, index))\\n                );\\n\\n            breed[tokenId] = breedGenerated;\\n            gender[tokenId] = genderGenerated;\\n            level[tokenId] = levelGenerated;\\n            attack[tokenId] = attackGenerated;\\n            defense[tokenId] = defenseGenerated;\\n            generated[tokenId] = true;\\n\\n            emit GeneratedNFT(tokenId);\\n        }\\n\\n        return true;\\n    }\\n\\n    function walletOfOwner(address _owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 tokenCount = balanceOf(_owner);\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\n        for (uint256 i = 0; i < tokenCount; i++) {\\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokensId;\\n    }\\n\\n    function changeBaseTokenURI(string memory newBaseTokenURI)\\n        external\\n        onlyOwner\\n    {\\n        strBaseTokenURI = newBaseTokenURI;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return strBaseTokenURI;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\n        return string(abi.encodePacked(_baseURI(), _tokenId.toString()));\\n    }\\n\\n    function pauseContract() external onlyOwner returns (bool) {\\n        _pause();\\n        return true;\\n    }\\n\\n    function unpauseContract() external onlyOwner returns (bool) {\\n        _unpause();\\n        return true;\\n    }\\n\\n    function changeCWOLFContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        CWOLFContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeRewardsPoolAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        rewardsPoolAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeGasToMinter(uint256 _newValue)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        gasToMinter = _newValue;\\n        return true;\\n    }\\n\\n    function changeCommissionInDollars(uint256 _newValue)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        commissionInDollars = _newValue;\\n        return true;\\n    }\\n\\n    function changeboxPriceCWOLFInDollars(uint256 _newValue)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        boxPriceCWOLFInDollars = _newValue;\\n        return true;\\n    }\\n\\n    function changeWolfsNFTHelperContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        wolfsNFTHelperContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet2(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress2 = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet3(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress3 = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddressMinterWallet4(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        minterWalletAddress4 = _newAddress;\\n        return true;\\n    }\\n\\n    function changeAddressCommissionWallet(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        commissionWalletAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeWolfPackNFTContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        WolfPackNFTContractAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function changeMarketplaceContractAddress(address _newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        marketPlaceAddress = _newAddress;\\n        return true;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(_from, _to, _tokenId);\\n\\n        // If the token is used in wolfPack, can not be tranferred\\n        if (WolfPackNFTContractAddress != address(0)) {\\n            bool isUsed = WolfPacksNFT(WolfPackNFTContractAddress).wolfsUsed(\\n                _tokenId\\n            );\\n            require(isUsed == false, \\\"Wolf in WolfPack\\\");\\n        }\\n\\n        if (\\n            _from != address(0) &&\\n            _to != address(0) &&\\n            !(msg.sender == marketPlaceAddress || _to == rewardsPoolAddress)\\n        ) {\\n            revert(\\\"Only CW MarketPlace allowed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5e623858b4b52ee8fe32360f6fb37672a015349e5988bd39a5e7174b3b5a8e5a\",\"license\":\"MIT\"},\"contracts/WolfsNFTHelper.sol\":{\"content\":\"/*\\nCRYPTOWOLF\\nWeb: https://cryptowolf.finance\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./Random.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract WolfsNFTHelper is Initializable, OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    /*\\n\\n    # BREED\\n    LAND: 0\\n    WATER: 1\\n    ICE: 2\\n    FIRE: 3\\n    FOREST: 4\\n    AIR: 5\\n    ELECTRIC: 6\\n    LEGENDARY: 7\\n\\n\\n    # GENDER\\n    MALE: 0\\n    FEMALE: 1\\n    }\\n\\n    # LEVEL \\n    WOOD: 0\\n    BRONZE: 1\\n    SILVER: 2\\n    GOLD: 3\\n    PLATINUM: 4\\n    DIAMOND: 5\\n\\n    */\\n\\n    bool public isInitialized;\\n    uint256[] private breedPercentages;\\n    uint256[] private attackDefensePercentages;\\n    uint256[] private attackLevels;\\n    uint256[][] private attackDefenseLevels;\\n\\n    constructor() initializer {}\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n\\n        breedPercentages = [14, 14, 14, 14, 14, 14, 14, 2];\\n        attackDefensePercentages = [54, 24, 12, 6, 3, 1];\\n\\n        attackDefenseLevels = [\\n            [20, 49],\\n            [50, 75],\\n            [76, 113],\\n            [114, 143],\\n            [144, 184],\\n            [185, 222]\\n        ];\\n\\n        isInitialized = true;\\n    }\\n\\n    function generateBreed(bytes32 _seed) internal view returns (uint256) {\\n        uint256 randomNumber = Random.randomMinMax(\\n            keccak256(abi.encodePacked(_seed, uint256(10000))),\\n            1,\\n            100\\n        );\\n\\n        if (randomNumber <= breedPercentages[0]) {\\n            return 0;\\n        } else if (\\n            randomNumber > sumPercentages(1, breedPercentages) &&\\n            randomNumber <= sumPercentages(2, breedPercentages)\\n        ) {\\n            return 1;\\n        } else if (\\n            randomNumber > sumPercentages(2, breedPercentages) &&\\n            randomNumber <= sumPercentages(3, breedPercentages)\\n        ) {\\n            return 2;\\n        } else if (\\n            randomNumber > sumPercentages(3, breedPercentages) &&\\n            randomNumber <= sumPercentages(4, breedPercentages)\\n        ) {\\n            return 3;\\n        } else if (\\n            randomNumber > sumPercentages(4, breedPercentages) &&\\n            randomNumber <= sumPercentages(5, breedPercentages)\\n        ) {\\n            return 4;\\n        } else if (\\n            randomNumber > sumPercentages(5, breedPercentages) &&\\n            randomNumber <= sumPercentages(6, breedPercentages)\\n        ) {\\n            return 5;\\n        } else if (\\n            randomNumber > sumPercentages(6, breedPercentages) &&\\n            randomNumber <= sumPercentages(7, breedPercentages)\\n        ) {\\n            return 6;\\n        } else if (\\n            randomNumber > sumPercentages(7, breedPercentages) &&\\n            randomNumber <= sumPercentages(8, breedPercentages)\\n        ) {\\n            return 7;\\n        }\\n        return 0;\\n    }\\n\\n    function generateGender(bytes32 _seed) internal pure returns (uint256) {\\n        uint256 randomNumber = Random.randomMinMax(\\n            keccak256(abi.encodePacked(_seed, uint256(20000))),\\n            0,\\n            1\\n        );\\n\\n        if (randomNumber == 0) {\\n            return 0;\\n        } else {\\n            return 1;\\n        }\\n    }\\n\\n    function generateLevels(bytes32 _seed)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 randomNumber = Random.randomMinMax(_seed, 1, 100);\\n\\n        bytes32 seed1 = _seed;\\n        bytes32 seed2 = keccak256(abi.encode(_seed));\\n\\n        uint256 attack;\\n        uint256 defense;\\n        uint256 level;\\n\\n        if (randomNumber <= attackDefensePercentages[0]) {\\n            attack = Random.randomMinMax(\\n                seed1,\\n                attackDefenseLevels[0][0],\\n                attackDefenseLevels[0][1]\\n            );\\n            defense = Random.randomMinMax(\\n                seed2,\\n                attackDefenseLevels[0][0],\\n                attackDefenseLevels[0][1]\\n            );\\n            level = 0;\\n        } else if (\\n            randomNumber > sumPercentages(1, attackDefensePercentages) &&\\n            randomNumber <= sumPercentages(2, attackDefensePercentages)\\n        ) {\\n            attack = Random.randomMinMax(\\n                seed1,\\n                attackDefenseLevels[1][0],\\n                attackDefenseLevels[1][1]\\n            );\\n            defense = Random.randomMinMax(\\n                seed2,\\n                attackDefenseLevels[1][0],\\n                attackDefenseLevels[1][1]\\n            );\\n            level = 1;\\n        } else if (\\n            randomNumber > sumPercentages(2, attackDefensePercentages) &&\\n            randomNumber <= sumPercentages(3, attackDefensePercentages)\\n        ) {\\n            attack = Random.randomMinMax(\\n                seed1,\\n                attackDefenseLevels[2][0],\\n                attackDefenseLevels[2][1]\\n            );\\n            defense = Random.randomMinMax(\\n                seed2,\\n                attackDefenseLevels[2][0],\\n                attackDefenseLevels[2][1]\\n            );\\n            level = 2;\\n        } else if (\\n            randomNumber > sumPercentages(3, attackDefensePercentages) &&\\n            randomNumber <= sumPercentages(4, attackDefensePercentages)\\n        ) {\\n            attack = Random.randomMinMax(\\n                seed1,\\n                attackDefenseLevels[3][0],\\n                attackDefenseLevels[3][1]\\n            );\\n            defense = Random.randomMinMax(\\n                seed2,\\n                attackDefenseLevels[3][0],\\n                attackDefenseLevels[3][1]\\n            );\\n            level = 3;\\n        } else if (\\n            randomNumber > sumPercentages(4, attackDefensePercentages) &&\\n            randomNumber <= sumPercentages(5, attackDefensePercentages)\\n        ) {\\n            attack = Random.randomMinMax(\\n                seed1,\\n                attackDefenseLevels[4][0],\\n                attackDefenseLevels[4][1]\\n            );\\n            defense = Random.randomMinMax(\\n                seed2,\\n                attackDefenseLevels[4][0],\\n                attackDefenseLevels[4][1]\\n            );\\n            level = 4;\\n        } else if (\\n            randomNumber > sumPercentages(5, attackDefensePercentages) &&\\n            randomNumber <= sumPercentages(6, attackDefensePercentages)\\n        ) {\\n            attack = Random.randomMinMax(\\n                seed1,\\n                attackDefenseLevels[5][0],\\n                attackDefenseLevels[5][1]\\n            );\\n            defense = Random.randomMinMax(\\n                seed2,\\n                attackDefenseLevels[5][0],\\n                attackDefenseLevels[5][1]\\n            );\\n            level = 5;\\n        }\\n\\n        return (attack, defense, level);\\n    }\\n\\n    function generateWolf(bytes32 _seed)\\n        external\\n        view\\n        returns (\\n            uint256 breed,\\n            uint256 gender,\\n            uint256 level,\\n            uint256 attack,\\n            uint256 defense\\n        )\\n    {\\n        uint256 breedGenerated = generateBreed(_seed);\\n        uint256 genderGenerated = generateGender(_seed);\\n        (\\n            uint256 attackGenerated,\\n            uint256 defenseGenerated,\\n            uint256 levelGenerated\\n        ) = generateLevels(_seed);\\n\\n        return (\\n            breedGenerated,\\n            genderGenerated,\\n            levelGenerated,\\n            attackGenerated,\\n            defenseGenerated\\n        );\\n    }\\n\\n    function sumPercentages(uint256 index, uint256[] memory percentages)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 result;\\n        for (uint256 i = 0; i < index; i++) {\\n            result = result + percentages[i];\\n        }\\n        return result;\\n    }\\n\\n    function updateBreedPercentages(uint256[] memory _newPercentages)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(_newPercentages.length == 7, \\\"Array length must have 8 items\\\");\\n\\n        uint256 sum;\\n        for (uint256 index = 0; index < _newPercentages.length; index++) {\\n            sum = sum + _newPercentages[index];\\n        }\\n        require(sum == 100, \\\"Array sum must be 100\\\");\\n\\n        breedPercentages[0] = _newPercentages[0];\\n        breedPercentages[1] = _newPercentages[1];\\n        breedPercentages[2] = _newPercentages[2];\\n        breedPercentages[3] = _newPercentages[3];\\n        breedPercentages[4] = _newPercentages[4];\\n        breedPercentages[5] = _newPercentages[5];\\n        breedPercentages[6] = _newPercentages[6];\\n        breedPercentages[7] = _newPercentages[7];\\n        return true;\\n    }\\n\\n    function updateAttackDefensePercentages(uint256[] memory _newPercentages)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(_newPercentages.length == 5, \\\"Array length must have 6 items\\\");\\n\\n        uint256 sum;\\n        for (uint256 index = 0; index < _newPercentages.length; index++) {\\n            sum = sum + _newPercentages[index];\\n        }\\n        require(sum == 100, \\\"Array sum must be 100\\\");\\n\\n        attackDefensePercentages[0] = _newPercentages[0];\\n        attackDefensePercentages[1] = _newPercentages[1];\\n        attackDefensePercentages[2] = _newPercentages[2];\\n        attackDefensePercentages[3] = _newPercentages[3];\\n        attackDefensePercentages[4] = _newPercentages[4];\\n        attackDefensePercentages[5] = _newPercentages[5];\\n        return true;\\n    }\\n\\n    function updateAttackDefenseLevels(uint256[][] memory _newData)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        attackDefenseLevels[0] = _newData[0];\\n        attackDefenseLevels[1] = _newData[1];\\n        attackDefenseLevels[2] = _newData[2];\\n        attackDefenseLevels[3] = _newData[3];\\n        attackDefenseLevels[4] = _newData[4];\\n        attackDefenseLevels[5] = _newData[5];\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xc3e9ecf801a09855863b2f80f63fd3e76323b4af7da616b15ac35262e3ffae33\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106104e15760003560e01c8063789381e511610281578063b95e84ef1161015a578063d706199b116100cc578063ed27107b11610085578063ed27107b14610fc6578063f055a10614610fe7578063f2fde38b14611017578063f83d802414611037578063f98e4afe14611057578063f9cba78e1461107757600080fd5b8063d706199b14610eca578063dcd13a6014610eeb578063e40e97a714610f1c578063e524da0d14610f3c578063e985e9c514610f5d578063ec58a70b14610fa657600080fd5b8063c98161261161011e578063c981612614610e1c578063ca84763314610e3d578063ca9be5ac14610e52578063cce8505514610e83578063cdb6d52d14610ea4578063d194b13714610eb757600080fd5b8063b95e84ef14610d83578063ba5d72b214610da4578063bd0e346c14610dc4578063be9d93f714610ddb578063c87b56dd14610dfc57600080fd5b80639f6223ee116101f3578063a64c1f80116101b7578063a64c1f8014610cbe578063a90df25414610cd3578063abee8f0414610cf3578063b191d86914610d13578063b811568314610d41578063b88d4fde14610d6357600080fd5b80639f6223ee14610c345780639f6454e214610c4b5780639fbeae7d14610c6b578063a180b08314610c8b578063a22cb46514610c9e57600080fd5b806384bfa2bf1161024557806384bfa2bf14610b8457806387e7147914610bb257806388e5205114610bc95780638b8ab6e614610be05780638da5cb5b14610c0057806395d89b4114610c1f57600080fd5b8063789381e514610aec5780637af9439e14610b075780637d74d55f14610b1e578063836a0c8a14610b3e5780638456cb5914610b6f57600080fd5b80633bebcabb116103be57806349c6421d116103305780636352211e116102e95780636352211e14610a4f578063667ff43a14610a6f5780636bf881da14610a8f5780636d7310cb14610a9757806370a0823114610ab7578063715018a614610ad757600080fd5b806349c6421d1461098f5780634f6ccce7146109af5780634f9cfb7b146109cf5780635a4182d614610a005780635c975abb14610a1757806361f80f8814610a2f57600080fd5b806343118c5e1161038257806343118c5e146108a55780634321b9be146108d3578063438b6300146108f457806343dd5eb11461092157806344dd6485146109415780634859a1ee1461096f57600080fd5b80633bebcabb146108025780633f4ba83a14610822578063404d298c1461083757806341be29011461086557806342842e0e1461088557600080fd5b806320555067116104575780632f745c591161041b5780632f745c59146107475780632f9e9eaf14610767578063358764761461078757806335c2401e146107a7578063392e53cd146107c75780633a90efed146107e257600080fd5b8063205550671461069757806323b872dd146106c5578063266108c9146106e55780632a045cf4146107065780632a40c82f1461072757600080fd5b806309565367116104a957806309565367146105cb578063095ea7b3146105eb5780630f352bc71461060d57806311b031f71461063b57806318160ddd146106525780631c395afc1461066757600080fd5b806301f042af146104e657806301ffc9a7146105105780630221585c1461054057806306fdde0314610571578063081812fc14610593575b600080fd5b3480156104f257600080fd5b506104fd6101605481565b6040519081526020015b60405180910390f35b34801561051c57600080fd5b5061053061052b36600461522e565b611097565b6040519015158152602001610507565b34801561054c57600080fd5b5061053061055b36600461524b565b61016f6020526000908152604090205460ff1681565b34801561057d57600080fd5b506105866110c2565b60405161050791906152bc565b34801561059f57600080fd5b506105b36105ae36600461524b565b611154565b6040516001600160a01b039091168152602001610507565b3480156105d757600080fd5b506104fd6105e63660046152cf565b6111ee565b3480156105f757600080fd5b5061060b610606366004615306565b611220565b005b34801561061957600080fd5b506104fd61062836600461524b565b6101736020526000908152604090205481565b34801561064757600080fd5b506104fd6101635481565b34801561065e57600080fd5b506099546104fd565b34801561067357600080fd5b5061053061068236600461524b565b60009081526101716020526040902054151590565b3480156106a357600080fd5b506104fd6106b236600461524b565b600090815261016d602052604090205490565b3480156106d157600080fd5b5061060b6106e0366004615332565b611336565b3480156106f157600080fd5b50610166546105b3906001600160a01b031681565b34801561071257600080fd5b50610168546105b3906001600160a01b031681565b34801561073357600080fd5b5061060b6107423660046152cf565b611367565b34801561075357600080fd5b506104fd610762366004615306565b61145d565b34801561077357600080fd5b506105306107823660046152cf565b6114f3565b34801561079357600080fd5b5061060b6107a2366004615373565b6118af565b3480156107b357600080fd5b506105306107c23660046154df565b611aed565b3480156107d357600080fd5b5061015f546105309060ff1681565b3480156107ee57600080fd5b5061060b6107fd3660046152cf565b611b3a565b34801561080e57600080fd5b5061053061081d3660046154df565b611c19565b34801561082e57600080fd5b50610530611cc5565b34801561084357600080fd5b506104fd61085236600461524b565b6101756020526000908152604090205481565b34801561087157600080fd5b50610530610880366004615534565b611d01565b34801561089157600080fd5b5061060b6108a0366004615332565b611d6e565b3480156108b157600080fd5b506104fd6108c036600461524b565b6101726020526000908152604090205481565b3480156108df57600080fd5b5061017e546105b3906001600160a01b031681565b34801561090057600080fd5b5061091461090f366004615564565b611d89565b6040516105079190615581565b34801561092d57600080fd5b5061053061093c366004615564565b611e2b565b34801561094d57600080fd5b506104fd61095c36600461524b565b600090815261016e602052604090205490565b34801561097b57600080fd5b5061053061098a3660046152cf565b611e7f565b34801561099b57600080fd5b506104fd6109aa3660046152cf565b611eb1565b3480156109bb57600080fd5b506104fd6109ca36600461524b565b611ece565b3480156109db57600080fd5b506105306109ea36600461524b565b6000908152610178602052604090205460ff1690565b348015610a0c57600080fd5b506104fd61017c5481565b348015610a2357600080fd5b5060c95460ff16610530565b348015610a3b57600080fd5b506104fd610a4a366004615564565b611f61565b348015610a5b57600080fd5b506105b3610a6a36600461524b565b611f98565b348015610a7b57600080fd5b50610530610a8a366004615564565b61200f565b6104fd612063565b348015610aa357600080fd5b506104fd610ab236600461524b565b6122b5565b348015610ac357600080fd5b506104fd610ad2366004615564565b612409565b348015610ae357600080fd5b5061060b612490565b348015610af857600080fd5b50610177546105309060ff1681565b348015610b1357600080fd5b506104fd6101795481565b348015610b2a57600080fd5b506104fd610b3936600461524b565b6124c7565b348015610b4a57600080fd5b50610530610b5936600461524b565b6101786020526000908152604090205460ff1681565b348015610b7b57600080fd5b506105306125f8565b348015610b9057600080fd5b506104fd610b9f36600461524b565b6101746020526000908152604090205481565b348015610bbe57600080fd5b506104fd6101625481565b348015610bd557600080fd5b506104fd61017a5481565b348015610bec57600080fd5b5061060b610bfb3660046152cf565b61262e565b348015610c0c57600080fd5b5061012d546001600160a01b03166105b3565b348015610c2b57600080fd5b506105866126e6565b348015610c4057600080fd5b506104fd61017b5481565b348015610c5757600080fd5b506104fd610c6636600461524b565b6126f5565b348015610c7757600080fd5b50610530610c863660046152cf565b61289a565b610530610c993660046155c5565b612e45565b348015610caa57600080fd5b5061060b610cb936600461561f565b612e67565b348015610cca57600080fd5b50610530612e72565b348015610cdf57600080fd5b50610530610cee36600461564d565b612ecf565b348015610cff57600080fd5b5061060b610d0e3660046152cf565b612f3b565b348015610d1f57600080fd5b506104fd610d2e36600461524b565b6101716020526000908152604090205481565b348015610d4d57600080fd5b50610d56612ff3565b60405161050791906156ba565b348015610d6f57600080fd5b5061060b610d7e366004615743565b6130ac565b348015610d8f57600080fd5b5061016a546105b3906001600160a01b031681565b348015610db057600080fd5b5061060b610dbf3660046152cf565b6130e4565b348015610dd057600080fd5b506104fd6101615481565b348015610de757600080fd5b50610169546105b3906001600160a01b031681565b348015610e0857600080fd5b50610586610e1736600461524b565b61316c565b348015610e2857600080fd5b50610165546105b3906001600160a01b031681565b348015610e4957600080fd5b50610586613202565b348015610e5e57600080fd5b50610530610e6d36600461524b565b6000908152610176602052604090205460ff1690565b348015610e8f57600080fd5b50610164546105b3906001600160a01b031681565b61060b610eb23660046152cf565b613291565b61060b610ec53660046152cf565b6136ad565b348015610ed657600080fd5b50610167546105b3906001600160a01b031681565b348015610ef757600080fd5b50610530610f0636600461524b565b6101706020526000908152604090205460ff1681565b348015610f2857600080fd5b5061060b610f373660046157c3565b613b54565b348015610f4857600080fd5b5061016b546105b3906001600160a01b031681565b348015610f6957600080fd5b50610530610f7836600461580c565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b348015610fb257600080fd5b506104fd610fc136600461524b565b613b93565b348015610fd257600080fd5b5061017d546105b3906001600160a01b031681565b348015610ff357600080fd5b5061053061100236600461524b565b60009081526101736020526040902054151590565b34801561102357600080fd5b5061060b611032366004615564565b613d90565b34801561104357600080fd5b5061053061105236600461524b565b613e2c565b34801561106357600080fd5b5061060b6110723660046152cf565b613e64565b34801561108357600080fd5b5061053061109236600461524b565b613eec565b60006001600160e01b0319821663780e9d6360e01b14806110bc57506110bc826141e8565b92915050565b6060606580546110d19061583a565b80601f01602080910402602001604051908101604052809291908181526020018280546110fd9061583a565b801561114a5780601f1061111f5761010080835404028352916020019161114a565b820191906000526020600020905b81548152906001019060200180831161112d57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b03166111d25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b61016e602052816000526040600020818154811061120b57600080fd5b90600052602060002001600091509150505481565b600061122b82611f98565b9050806001600160a01b0316836001600160a01b031614156112995760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016111c9565b336001600160a01b03821614806112b557506112b58133610f78565b6113275760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016111c9565b6113318383614238565b505050565b61134033826142a6565b61135c5760405162461bcd60e51b81526004016111c990615875565b611331838383614399565b610167546001600160a01b031633146113925760405162461bcd60e51b81526004016111c9906158c6565b600082815261017260205260409020548111156114005760405162461bcd60e51b815260206004820152602660248201527f416d6f756e7420746f2064656372656173652067726561746572207468616e20604482015265656e6572677960d01b60648201526084016111c9565b6000828152610172602052604090205461141b908290615913565b60008381526101726020526040808220929092559051829184917f6ac68454268e9a206f1d66786ad0a274127f926af0a82a5094b83c51262a81db9190a35050565b600061146883612409565b82106114ca5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016111c9565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b6000336114ff84611f98565b6001600160a01b0316146115255760405162461bcd60e51b81526004016111c99061592a565b610169546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b15801561156a57600080fd5b505afa15801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a29190615961565b6001600160a01b0316146115f85760405162461bcd60e51b815260206004820152601860248201527f4d6174657269616c2070726f7065727479206661696c6564000000000000000060448201526064016111c9565b600083815261016e602052604090205460141161164a5760405162461bcd60e51b815260206004820152601060248201526f131a5b5a5d080c8c081c995858da195960821b60448201526064016111c9565b6000828152610170602052604090205460ff16156116b65760405162461bcd60e51b815260206004820152602360248201527f4d6174657269616c206973207573656420696e206f7468657220776f6c66207060448201526261636b60e81b60648201526084016111c9565b600083815261016e6020908152604080832080546001808201835591855283852001869055858452610170909252808320805460ff191690921790915561016a5461016054915163674adb7d60e01b815260048101929092526001600160a01b03169063674adb7d9060240160206040518083038186803b15801561173a57600080fd5b505afa15801561174e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611772919061597e565b61016654604051636eb1769f60e11b815233600482015230602482015291925082916001600160a01b039091169063dd62ed3e9060440160206040518083038186803b1580156117c157600080fd5b505afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f9919061597e565b10156118175760405162461bcd60e51b81526004016111c990615997565b61016654610164546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926118529233929091169086906004016159c5565b602060405180830381600087803b15801561186c57600080fd5b505af1158015611880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a491906159e9565b506001949350505050565b600054610100900460ff16806118c8575060005460ff16155b6118e45760405162461bcd60e51b81526004016111c990615a06565b600054610100900460ff16158015611906576000805461ffff19166101011790555b6119586040518060400160405280600c81526020016b15dbdb19941858dadcd3919560a21b8152506040518060400160405280600c81526020016b15dbdb19941858dadcd3919560a21b815250614544565b6119606145cb565b61015f8054600160ff19918216811790925561016680546001600160a01b03199081166001600160a01b038d811691909117909255610164805482168c841617905566038d7ea4c68000610161556703782dace9d90000610163819055670de0b6b3a76400006101625561016b805483168c851617905561016580548316888516179055610168805483168b8516179055610169805483168a851617905561016a8054909216928816929092179055610160556101766020527f8bf58c1e65532c2b9774e3eaf2a457387186c735c828c0d80368a2137b35bbb080548216831790557f0ff2ba3a9145a3f46b78a0296e76f93c1548f9b74f45a3a7c3e505d254d3776580548216831790557f2fb817e73e43a799c7e2bf5389458e16770e008cba8ed9afec73e2816c828a348054821683179055601e60009081527ff2f84cb4b18bdee53cc04d661dbbcb706ba0c27a3c5813b732912af1fc6cc80880549092169092179055611ad1908790614646565b8015611ae3576000805461ff00191690555b5050505050505050565b6000805b8251811015611b3057611b1d84848381518110611b1057611b10615a54565b60200260200101516114f3565b5080611b2881615a6a565b915050611af1565b5060019392505050565b610167546001600160a01b03163314611b655760405162461bcd60e51b81526004016111c9906158c6565b60008281526101716020526040902054811015611bd95760008281526101716020526040902054611b97908290615913565b60008381526101716020526040808220929092559051829184917fd8323ddddc48d6717bdd6081a3fd4b0bc5b7cdc1e8f4f78d68a5b39f645405969190a35050565b600082815261017160205260408082208290555183907fd8323ddddc48d6717bdd6081a3fd4b0bc5b7cdc1e8f4f78d68a5b39f64540596908390a35b5050565b600080611c2584613b93565b60008581526101716020526040902054909150811115611c835760405162461bcd60e51b8152602060048201526019602482015278131a5999481a5cc81b195cdcc81d1a185b881a5b9a5d1a585b603a1b60448201526064016111c9565b60005b83518110156118a457611cb285858381518110611ca557611ca5615a54565b602002602001015161289a565b5080611cbd81615a6a565b915050611c86565b61012d546000906001600160a01b03163314611cf35760405162461bcd60e51b81526004016111c990615a85565b611cfb614660565b50600190565b6000611d1661012d546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480611d405750610167546001600160a01b031633145b611d4957600080fd5b5060009182526101786020526040909120805460ff1916911515919091179055600190565b611331838383604051806020016040528060008152506130ac565b60606000611d9683612409565b905060008167ffffffffffffffff811115611db357611db3615409565b604051908082528060200260200182016040528015611ddc578160200160208202803683370190505b50905060005b82811015611e2357611df4858261145d565b828281518110611e0657611e06615a54565b602090810291909101015280611e1b81615a6a565b915050611de2565b509392505050565b61012d546000906001600160a01b03163314611e595760405162461bcd60e51b81526004016111c990615a85565b5061017e80546001600160a01b0383166001600160a01b03199091161790556001919050565b610167546000906001600160a01b03163314611e9a57600080fd5b506000918252610175602052604090912055600190565b61016d602052816000526040600020818154811061120b57600080fd5b6000611ed960995490565b8210611f3c5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016111c9565b60998281548110611f4f57611f4f615a54565b90600052602060002001549050919050565b61012d546000906001600160a01b03163314611f8f5760405162461bcd60e51b81526004016111c990615a85565b6110bc826146f3565b6000818152606760205260408120546001600160a01b0316806110bc5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016111c9565b61012d546000906001600160a01b0316331461203d5760405162461bcd60e51b81526004016111c990615a85565b5061017d80546001600160a01b0383166001600160a01b03199091161790556001919050565b600061207160c95460ff1690565b1561208e5760405162461bcd60e51b81526004016111c990615aba565b600260fb5414156120b15760405162461bcd60e51b81526004016111c990615ae4565b600260fb5561016a54610163546040516365db5d2560e01b815260048101919091526000916001600160a01b0316906365db5d259060240160206040518083038186803b15801561210157600080fd5b505afa158015612115573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612139919061597e565b9050806101615461214a9190615b1b565b34101561218a5760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420656e6f7567682067617360901b60448201526064016111c9565b61016b54610161546040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156121c8573d6000803e3d6000fd5b50610165546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015612204573d6000803e3d6000fd5b50336001600160a01b03166108fc82610161546122219190615b1b565b61222b9034615913565b6040518115909202916000818181858888f19350505050158015612253573d6000803e3d6000fd5b50600061225f336146f3565b905060006122706101795442614747565b6101775490915060ff168015612289575061017a548111155b156122a957600082815261017860205260409020805460ff191660011790555b50915050600160fb5590565b600081815261016e602090815260408083208054825181850281018501909352808352849383018282801561230957602002820191906000526020600020905b8154815260200190600101908083116122f5575b50505050509050600080600090505b82518110156123e657600083828151811061233557612335615a54565b60209081029190910101516101695460405163387dd9e960e01b8152600481018390529192506000916001600160a01b039091169063387dd9e99060240160206040518083038186803b15801561238b57600080fd5b505afa15801561239f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c3919061597e565b90506123cf8185615b1b565b9350505080806123de90615a6a565b915050612318565b50600084815261016d60205260409020546124019082615913565b949350505050565b60006001600160a01b0382166124745760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016111c9565b506001600160a01b031660009081526068602052604090205490565b61012d546001600160a01b031633146124bb5760405162461bcd60e51b81526004016111c990615a85565b6124c56000614775565b565b600081815261016e602090815260408083208054825181850281018501909352808352849383018282801561251b57602002820191906000526020600020905b815481526020019060010190808311612507575b50505050509050600080600090505b8251811015611e2357600083828151811061254757612547615a54565b60209081029190910101516101695460405163387dd9e960e01b8152600481018390529192506000916001600160a01b039091169063387dd9e99060240160206040518083038186803b15801561259d57600080fd5b505afa1580156125b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d5919061597e565b90506125e18185615b1b565b9350505080806125f090615a6a565b91505061252a565b61012d546000906001600160a01b031633146126265760405162461bcd60e51b81526004016111c990615a85565b611cfb6147c8565b61017e546001600160a01b031633146126895760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f7420436c61696d20636f6e74726163740000000060448201526064016111c9565b600082815261017260205260409020546126a4908290615b1b565b60008381526101726020526040808220929092559051829184917f8b5555ccb5516e2e5bcd58b9417ab7149fd2fbb8858f49a6941c12375a48eae59190a35050565b6060606680546110d19061583a565b6000818152606760205260408120546001600160a01b031661274e5760405162461bcd60e51b815260206004820152601260248201527115dbdb19941858dac81b9bdd08195e1a5cdd60721b60448201526064016111c9565b600082815261016d60209081526040808320805482518185028101850190935280835291929091908301828280156127a557602002820191906000526020600020905b815481526020019060010190808311612791575b50505050509050600080600090505b8251811015611e23576101685483516001600160a01b039091169063073073f4908590849081106127e7576127e7615a54565b60200260200101516040518263ffffffff1660e01b815260040161280d91815260200190565b60006040518083038186803b15801561282557600080fd5b505afa158015612839573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128619190810190615b33565b60038151811061287357612873615a54565b6020026020010151826128869190615b1b565b91508061289281615a6a565b9150506127b4565b6000336128a684611f98565b6001600160a01b0316146128cc5760405162461bcd60e51b81526004016111c99061592a565b600083815261017460209081526040808320546101739092528220546128f29190614820565b90508042101580612910575060008481526101736020526040902054155b6129555760405162461bcd60e51b81526020600482015260166024820152750426f6e642069732067726561746572207468616e20360541b60448201526064016111c9565b610168546040516331a9108f60e11b81526004810185905233916001600160a01b031690636352211e9060240160206040518083038186803b15801561299a57600080fd5b505afa1580156129ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d29190615961565b6001600160a01b031614612a1f5760405162461bcd60e51b815260206004820152601460248201527315dbdb19881c1c9bdc195c9d1e4819985a5b195960621b60448201526064016111c9565b6000612a2a856122b5565b11612a6e5760405162461bcd60e51b815260206004820152601460248201527313585e0818d85c1858da5d1e481c995858da195960621b60448201526064016111c9565b600083815261016f602052604090205460ff1615612ace5760405162461bcd60e51b815260206004820152601f60248201527f576f6c66206973207573656420696e206f7468657220776f6c66207061636b0060448201526064016111c9565b600083815261016f60209081526040808320805460ff1916600190811790915587845261016d835281842080549182018155845291909220018490556101685490516301cc1cfd60e21b8152600481018590526001600160a01b039091169063073073f49060240160006040518083038186803b158015612b4e57600080fd5b505afa158015612b62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b8a9190810190615b33565b600481518110612b9c57612b9c615a54565b6020908102919091010151610168546040516301cc1cfd60e21b8152600481018690526001600160a01b039091169063073073f49060240160006040518083038186803b158015612bec57600080fd5b505afa158015612c00573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c289190810190615b33565b600381518110612c3a57612c3a615a54565b6020026020010151610171600087815260200190815260200160002054612c619190615b1b565b612c6b9190615b1b565b600085815261017160205260408082209290925561016a5461016054925163674adb7d60e01b815291926001600160a01b039091169163674adb7d91612cb79160040190815260200190565b60206040518083038186803b158015612ccf57600080fd5b505afa158015612ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d07919061597e565b61016654604051636eb1769f60e11b815233600482015230602482015291925082916001600160a01b039091169063dd62ed3e9060440160206040518083038186803b158015612d5657600080fd5b505afa158015612d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8e919061597e565b1015612dac5760405162461bcd60e51b81526004016111c990615997565b61016654610164546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92612de79233929091169086906004016159c5565b602060405180830381600087803b158015612e0157600080fd5b505af1158015612e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3991906159e9565b50600195945050505050565b600080612e50612063565b9050612e5c8185611aed565b506118a48184611c19565b611c15338383614848565b61012d546000906001600160a01b03163314612ea05760405162461bcd60e51b81526004016111c990615a85565b610177805460ff19811660ff909116151790556101795415612ec3576000612ec5565b425b6101795550600190565b6000805b8351811015612f0557612ef285858381518110611b1057611b10615a54565b5080612efd81615a6a565b915050612ed3565b5060005b82518110156118a457612f2885848381518110611ca557611ca5615a54565b5080612f3381615a6a565b915050612f09565b61017e546001600160a01b03163314612f965760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f7420436c61696d20636f6e74726163740000000060448201526064016111c9565b60008281526101736020526040902054612fb1908290615b1b565b60008381526101736020526040808220929092559051829184917f0db72b54d9e534ba0c77153fa6363be8e27544b9f6fb0dd8271ce4e614c0528b9190a35050565b612ffb615147565b61016a54610163546040516365db5d2560e01b815260048101919091526000916001600160a01b0316906365db5d259060240160206040518083038186803b15801561304657600080fd5b505afa15801561305a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307e919061597e565b9050613088615147565b61016154808252602082018390526130a1908390615b1b565b604082015292915050565b6130b633836142a6565b6130d25760405162461bcd60e51b81526004016111c990615875565b6130de84848484614917565b50505050565b610167546001600160a01b0316331461310f5760405162461bcd60e51b81526004016111c9906158c6565b6000828152610171602052604090205461312a908290615b1b565b60008381526101716020526040808220929092559051829184917f942a5d554bafc0765cfcb4910b691da15bf7f84a0b558d4b195d6e7e37df45a39190a35050565b6000818152606760205260409020546060906001600160a01b03166131ca5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016111c9565b6131d261494a565b6131db8361495a565b6040516020016131ec929190615bc4565b6040516020818303038152906040529050919050565b61016c80546132109061583a565b80601f016020809104026020016040519081016040528092919081815260200182805461323c9061583a565b80156132895780601f1061325e57610100808354040283529160200191613289565b820191906000526020600020905b81548152906001019060200180831161326c57829003601f168201915b505050505081565b600260fb5414156132b45760405162461bcd60e51b81526004016111c990615ae4565b600260fb5560c95460ff16156132dc5760405162461bcd60e51b81526004016111c990615aba565b336132e683611f98565b6001600160a01b0316146133375760405162461bcd60e51b815260206004820152601860248201527713dddb995c881bd98815dbdb19941858dac819985a5b195960421b60448201526064016111c9565b61016a5461017c546040516365db5d2560e01b815260048101919091526000916001600160a01b0316906365db5d259060240160206040518083038186803b15801561338257600080fd5b505afa158015613396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ba919061597e565b9050803410156133ff5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682076616c756560801b60448201526064016111c9565b610165546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561343a573d6000803e3d6000fd5b50336108fc6134498334615913565b6040518115909202916000818181858888f19350505050158015613471573d6000803e3d6000fd5b5061016654604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b1580156134bc57600080fd5b505afa1580156134d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f4919061597e565b10156135125760405162461bcd60e51b81526004016111c990615997565b6000670de0b6b3a76400008361016a60009054906101000a90046001600160a01b03166001600160a01b0316637dad3ed06040518163ffffffff1660e01b815260040160206040518083038186803b15801561356d57600080fd5b505afa158015613581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a5919061597e565b6135af9190615bf3565b6135b99190615c28565b61016654610164546040516323b872dd60e01b81529293506001600160a01b03918216926323b872dd926135f692339291169088906004016159c5565b602060405180830381600087803b15801561361057600080fd5b505af1158015613624573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364891906159e9565b5060008481526101726020526040902054613664908290615b1b565b60008581526101726020526040808220929092559051829186917f8b5555ccb5516e2e5bcd58b9417ab7149fd2fbb8858f49a6941c12375a48eae59190a35050600160fb555050565b60c95460ff16156136d05760405162461bcd60e51b81526004016111c990615aba565b600260fb5414156136f35760405162461bcd60e51b81526004016111c990615ae4565b600260fb553361370283611f98565b6001600160a01b0316146137535760405162461bcd60e51b815260206004820152601860248201527713dddb995c881bd98815dbdb19941858dac819985a5b195960421b60448201526064016111c9565b6000818152610176602052604090205460ff1615156001146137b75760405162461bcd60e51b815260206004820152601f60248201527f4572726f723a20416d6f756e74206f66206461797320696e636f72726563740060448201526064016111c9565b61016a5461017b546040516365db5d2560e01b815260048101919091526000916001600160a01b0316906365db5d259060240160206040518083038186803b15801561380257600080fd5b505afa158015613816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061383a919061597e565b90508034101561387f5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682076616c756560801b60448201526064016111c9565b610165546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156138ba573d6000803e3d6000fd5b50336108fc6138c98334615913565b6040518115909202916000818181858888f193505050501580156138f1573d6000803e3d6000fd5b50600061271061390984670de0b6b3a7640000615bf3565b61391590611388615bf3565b61391f9190615c28565b61016a54600086815261016d6020526040812054929350916001600160a01b039091169063674adb7d906139539085615bf3565b6040518263ffffffff1660e01b815260040161397191815260200190565b60206040518083038186803b15801561398957600080fd5b505afa15801561399d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c1919061597e565b61016654604051636eb1769f60e11b815233600482015230602482015291925082916001600160a01b039091169063dd62ed3e9060440160206040518083038186803b158015613a1057600080fd5b505afa158015613a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a48919061597e565b1015613a665760405162461bcd60e51b81526004016111c990615997565b61016654610164546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92613aa19233929091169086906004016159c5565b602060405180830381600087803b158015613abb57600080fd5b505af1158015613acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af391906159e9565b5060008581526101736020526040902054613b0f908590615b1b565b600086815261017360205260408082208390555187917f0db72b54d9e534ba0c77153fa6363be8e27544b9f6fb0dd8271ce4e614c0528b91a35050600160fb55505050565b61012d546001600160a01b03163314613b7f5760405162461bcd60e51b81526004016111c990615a85565b8051611c159061016c906020840190615165565b60008060005b600084815261016d6020526040902054811015613d895761016854600085815261016d6020526040902080546001600160a01b039092169163073073f4919084908110613be857613be8615a54565b90600052602060002001546040518263ffffffff1660e01b8152600401613c1191815260200190565b60006040518083038186803b158015613c2957600080fd5b505afa158015613c3d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613c659190810190615b33565b600481518110613c7757613c77615a54565b602002602001015161016860009054906101000a90046001600160a01b03166001600160a01b031663073073f461016d60008881526020019081526020016000208481548110613cc957613cc9615a54565b90600052602060002001546040518263ffffffff1660e01b8152600401613cf291815260200190565b60006040518083038186803b158015613d0a57600080fd5b505afa158015613d1e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613d469190810190615b33565b600381518110613d5857613d58615a54565b602002602001015183613d6b9190615b1b565b613d759190615b1b565b915080613d8181615a6a565b915050613b99565b5092915050565b61012d546001600160a01b03163314613dbb5760405162461bcd60e51b81526004016111c990615a85565b6001600160a01b038116613e205760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016111c9565b613e2981614775565b50565b61012d546000906001600160a01b03163314613e5a5760405162461bcd60e51b81526004016111c990615a85565b5061017a55600190565b610167546001600160a01b03163314613e8f5760405162461bcd60e51b81526004016111c9906158c6565b60008281526101736020526040902054613eaa908290615913565b60008381526101736020526040808220929092559051829184917fde27eb9694a52f8e94890f6cd51b96eaa2e09881e90fede859663e71cf721ead9190a35050565b600033613ef883611f98565b6001600160a01b031614613f1e5760405162461bcd60e51b81526004016111c99061592a565b6000613f2983613b93565b60008481526101716020526040902054909150811115613f875760405162461bcd60e51b8152602060048201526019602482015278131a5999481a5cc81b195cdcc81d1a185b881a5b9a5d1a585b603a1b60448201526064016111c9565b60008381526101756020526040812054613fa19042614a58565b905060188110156140005760405162461bcd60e51b8152602060048201526024808201527f4c657373207468616e20323420686f7572732066726f6d206c6173742068756e60448201526374696e6760e01b60648201526084016111c9565b600084815261016d602090815260408083208054825181850281018501909352808352919290919083018282801561405757602002820191906000526020600020905b815481526020019060010190808311614043575b5050505050905060005b81518110156140c357600061016f600084848151811061408357614083615a54565b6020026020010151815260200190815260200160002060006101000a81548160ff02191690831515021790555080806140bb90615a6a565b915050614061565b50600085815261016d602052604081206140dc916151e9565b600085815261016e602090815260408083208054825181850281018501909352808352919290919083018282801561413357602002820191906000526020600020905b81548152602001906001019080831161411f575b5050505050905060005b815181101561419f576000610170600084848151811061415f5761415f615a54565b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550808061419790615a6a565b91505061413d565b50600086815261016e602052604081206141b8916151e9565b600086815261017860205260409020805460ff1916905561016454612e399033906001600160a01b031688611d6e565b60006001600160e01b031982166380ac58cd60e01b148061421957506001600160e01b03198216635b5e139f60e01b145b806110bc57506301ffc9a760e01b6001600160e01b03198316146110bc565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061426d82611f98565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152606760205260408120546001600160a01b031661431f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016111c9565b600061432a83611f98565b9050806001600160a01b0316846001600160a01b031614806143655750836001600160a01b031661435a84611154565b6001600160a01b0316145b8061240157506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16612401565b826001600160a01b03166143ac82611f98565b6001600160a01b0316146144145760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016111c9565b6001600160a01b0382166144765760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016111c9565b614481838383614a74565b61448c600082614238565b6001600160a01b03831660009081526068602052604081208054600192906144b5908490615913565b90915550506001600160a01b03821660009081526068602052604081208054600192906144e3908490615b1b565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600054610100900460ff168061455d575060005460ff16155b6145795760405162461bcd60e51b81526004016111c990615a06565b600054610100900460ff1615801561459b576000805461ffff19166101011790555b6145a3614b1d565b6145ab614b1d565b6145b58383614b87565b8015611331576000805461ff0019169055505050565b600054610100900460ff16806145e4575060005460ff16155b6146005760405162461bcd60e51b81526004016111c990615a06565b600054610100900460ff16158015614622576000805461ffff19166101011790555b61462a614b1d565b614632614c1c565b8015613e29576000805461ff001916905550565b611c15828260405180602001604052806000815250614c7c565b60c95460ff166146a95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016111c9565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000806146ff60995490565b905061470b8382614646565b60405181906001600160a01b038516907f7a5477f3d257e8974dc6fb5c008b442d975968577dfad5d1283aa0a488bfab0b90600090a392915050565b60008183111561475657600080fd5b620151806147648484615913565b61476e9190615c28565b9392505050565b61012d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60c95460ff16156147eb5760405162461bcd60e51b81526004016111c990615aba565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586146d63390565b600061482f6201518083615bf3565b6148399084615b1b565b9050828110156110bc57600080fd5b816001600160a01b0316836001600160a01b031614156148aa5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016111c9565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b614922848484614399565b61492e84848484614caf565b6130de5760405162461bcd60e51b81526004016111c990615c3c565b606061016c80546110d19061583a565b60608161497e5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156149a8578061499281615a6a565b91506149a19050600a83615c28565b9150614982565b60008167ffffffffffffffff8111156149c3576149c3615409565b6040519080825280601f01601f1916602001820160405280156149ed576020820181803683370190505b5090505b841561240157614a02600183615913565b9150614a0f600a86615c8e565b614a1a906030615b1b565b60f81b818381518110614a2f57614a2f615a54565b60200101906001600160f81b031916908160001a905350614a51600a86615c28565b94506149f1565b600081831115614a6757600080fd5b610e106147648484615913565b614a7f838383614db1565b6001600160a01b03831615801590614a9f57506001600160a01b03821615155b8015614ad0575061017d546001600160a01b0316331480614ace5750610164546001600160a01b038381169116145b155b156113315760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c79204357204d61726b6574506c61636520616c6c6f776564000000000060448201526064016111c9565b600054610100900460ff1680614b36575060005460ff16155b614b525760405162461bcd60e51b81526004016111c990615a06565b600054610100900460ff16158015614632576000805461ffff19166101011790558015613e29576000805461ff001916905550565b600054610100900460ff1680614ba0575060005460ff16155b614bbc5760405162461bcd60e51b81526004016111c990615a06565b600054610100900460ff16158015614bde576000805461ffff19166101011790555b8251614bf1906065906020860190615165565b508151614c05906066906020850190615165565b508015611331576000805461ff0019169055505050565b600054610100900460ff1680614c35575060005460ff16155b614c515760405162461bcd60e51b81526004016111c990615a06565b600054610100900460ff16158015614c73576000805461ffff19166101011790555b61463233614775565b614c868383614e69565b614c936000848484614caf565b6113315760405162461bcd60e51b81526004016111c990615c3c565b60006001600160a01b0384163b156118a457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614cf3903390899088908890600401615ca2565b602060405180830381600087803b158015614d0d57600080fd5b505af1925050508015614d3d575060408051601f3d908101601f19168201909252614d3a91810190615cdf565b60015b614d97573d808015614d6b576040519150601f19603f3d011682016040523d82523d6000602084013e614d70565b606091505b508051614d8f5760405162461bcd60e51b81526004016111c990615c3c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612401565b6001600160a01b038316614e0c57614e0781609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b614e2f565b816001600160a01b0316836001600160a01b031614614e2f57614e2f8382614fb7565b6001600160a01b038216614e465761133181615054565b826001600160a01b0316826001600160a01b031614611331576113318282615103565b6001600160a01b038216614ebf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016111c9565b6000818152606760205260409020546001600160a01b031615614f245760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016111c9565b614f3060008383614a74565b6001600160a01b0382166000908152606860205260408120805460019290614f59908490615b1b565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001614fc484612409565b614fce9190615913565b600083815260986020526040902054909150808214615021576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b60995460009061506690600190615913565b6000838152609a60205260408120546099805493945090928490811061508e5761508e615a54565b9060005260206000200154905080609983815481106150af576150af615a54565b6000918252602080832090910192909255828152609a909152604080822084905585825281205560998054806150e7576150e7615cfc565b6001900381819060005260206000200160009055905550505050565b600061510e83612409565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b60405180606001604052806003906020820280368337509192915050565b8280546151719061583a565b90600052602060002090601f01602090048101928261519357600085556151d9565b82601f106151ac57805160ff19168380011785556151d9565b828001600101855582156151d9579182015b828111156151d95782518255916020019190600101906151be565b506151e5929150615203565b5090565b5080546000825590600052602060002090810190613e2991905b5b808211156151e55760008155600101615204565b6001600160e01b031981168114613e2957600080fd5b60006020828403121561524057600080fd5b813561476e81615218565b60006020828403121561525d57600080fd5b5035919050565b60005b8381101561527f578181015183820152602001615267565b838111156130de5750506000910152565b600081518084526152a8816020860160208601615264565b601f01601f19169290920160200192915050565b60208152600061476e6020830184615290565b600080604083850312156152e257600080fd5b50508035926020909101359150565b6001600160a01b0381168114613e2957600080fd5b6000806040838503121561531957600080fd5b8235615324816152f1565b946020939093013593505050565b60008060006060848603121561534757600080fd5b8335615352816152f1565b92506020840135615362816152f1565b929592945050506040919091013590565b600080600080600080600060e0888a03121561538e57600080fd5b8735615399816152f1565b965060208801356153a9816152f1565b955060408801356153b9816152f1565b945060608801356153c9816152f1565b935060808801356153d9816152f1565b925060a08801356153e9816152f1565b915060c08801356153f9816152f1565b8091505092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561544857615448615409565b604052919050565b600067ffffffffffffffff82111561546a5761546a615409565b5060051b60200190565b600082601f83011261548557600080fd5b8135602061549a61549583615450565b61541f565b82815260059290921b840181019181810190868411156154b957600080fd5b8286015b848110156154d457803583529183019183016154bd565b509695505050505050565b600080604083850312156154f257600080fd5b82359150602083013567ffffffffffffffff81111561551057600080fd5b61551c85828601615474565b9150509250929050565b8015158114613e2957600080fd5b6000806040838503121561554757600080fd5b82359150602083013561555981615526565b809150509250929050565b60006020828403121561557657600080fd5b813561476e816152f1565b6020808252825182820181905260009190848201906040850190845b818110156155b95783518352928401929184019160010161559d565b50909695505050505050565b600080604083850312156155d857600080fd5b823567ffffffffffffffff808211156155f057600080fd5b6155fc86838701615474565b9350602085013591508082111561561257600080fd5b5061551c85828601615474565b6000806040838503121561563257600080fd5b823561563d816152f1565b9150602083013561555981615526565b60008060006060848603121561566257600080fd5b83359250602084013567ffffffffffffffff8082111561568157600080fd5b61568d87838801615474565b935060408601359150808211156156a357600080fd5b506156b086828701615474565b9150509250925092565b60608101818360005b60038110156156e25781518352602092830192909101906001016156c3565b50505092915050565b600067ffffffffffffffff83111561570557615705615409565b615718601f8401601f191660200161541f565b905082815283838301111561572c57600080fd5b828260208301376000602084830101529392505050565b6000806000806080858703121561575957600080fd5b8435615764816152f1565b93506020850135615774816152f1565b925060408501359150606085013567ffffffffffffffff81111561579757600080fd5b8501601f810187136157a857600080fd5b6157b7878235602084016156eb565b91505092959194509250565b6000602082840312156157d557600080fd5b813567ffffffffffffffff8111156157ec57600080fd5b8201601f810184136157fd57600080fd5b612401848235602084016156eb565b6000806040838503121561581f57600080fd5b823561582a816152f1565b91506020830135615559816152f1565b600181811c9082168061584e57607f821691505b6020821081141561586f57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601e908201527f43616c6c6572206973206e6f742048756e74696e6720636f6e74726163740000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015615925576159256158fd565b500390565b60208082526018908201527f576f6c665061636b2070726f7065727479206661696c65640000000000000000604082015260600190565b60006020828403121561597357600080fd5b815161476e816152f1565b60006020828403121561599057600080fd5b5051919050565b6020808252601490820152734e6f7420656e6f75676820616c6c6f77616e636560601b604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156159fb57600080fd5b815161476e81615526565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415615a7e57615a7e6158fd565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115615b2e57615b2e6158fd565b500190565b60006020808385031215615b4657600080fd5b825167ffffffffffffffff811115615b5d57600080fd5b8301601f81018513615b6e57600080fd5b8051615b7c61549582615450565b81815260059190911b82018301908381019087831115615b9b57600080fd5b928401925b82841015615bb957835182529284019290840190615ba0565b979650505050505050565b60008351615bd6818460208801615264565b835190830190615bea818360208801615264565b01949350505050565b6000816000190483118215151615615c0d57615c0d6158fd565b500290565b634e487b7160e01b600052601260045260246000fd5b600082615c3757615c37615c12565b500490565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600082615c9d57615c9d615c12565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615cd590830184615290565b9695505050505050565b600060208284031215615cf157600080fd5b815161476e81615218565b634e487b7160e01b600052603160045260246000fdfea26469706673582212204a4cb3c0384df0d9f746120db3c50641ff595326fa62a47ff979bf2549b4dcca64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 131,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 134,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3103,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3352,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1425,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1427,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1431,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1435,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1439,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1445,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2256,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 2430,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2434,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2437,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2441,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2756,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 192,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 283,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 298,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 341,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 124,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10270,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "isInitialized",
        "offset": 0,
        "slot": "351",
        "type": "t_bool"
      },
      {
        "astId": 10272,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "addWolfOrMaterialCWOLFInDollar",
        "offset": 0,
        "slot": "352",
        "type": "t_uint256"
      },
      {
        "astId": 10274,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "gasToMinter",
        "offset": 0,
        "slot": "353",
        "type": "t_uint256"
      },
      {
        "astId": 10276,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "energyPointPriceInCWOLF",
        "offset": 0,
        "slot": "354",
        "type": "t_uint256"
      },
      {
        "astId": 10278,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "commissionInDollar",
        "offset": 0,
        "slot": "355",
        "type": "t_uint256"
      },
      {
        "astId": 10280,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "rewardsPoolAddress",
        "offset": 0,
        "slot": "356",
        "type": "t_address"
      },
      {
        "astId": 10282,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "commissionWalletAddress",
        "offset": 0,
        "slot": "357",
        "type": "t_address"
      },
      {
        "astId": 10284,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "CWOLFContractAddress",
        "offset": 0,
        "slot": "358",
        "type": "t_address"
      },
      {
        "astId": 10286,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "HuntingNFTContractAddress",
        "offset": 0,
        "slot": "359",
        "type": "t_address"
      },
      {
        "astId": 10288,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "WolfsNFTContractAddress",
        "offset": 0,
        "slot": "360",
        "type": "t_address"
      },
      {
        "astId": 10290,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "MaterialsNFTContractAddress",
        "offset": 0,
        "slot": "361",
        "type": "t_address"
      },
      {
        "astId": 10292,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "VariablesContractAddress",
        "offset": 0,
        "slot": "362",
        "type": "t_address"
      },
      {
        "astId": 10294,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "minterWalletAddress",
        "offset": 0,
        "slot": "363",
        "type": "t_address"
      },
      {
        "astId": 10296,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "strBaseTokenURI",
        "offset": 0,
        "slot": "364",
        "type": "t_string_storage"
      },
      {
        "astId": 10301,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "wolfsInWolfPack",
        "offset": 0,
        "slot": "365",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10306,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "materialsInWolfPack",
        "offset": 0,
        "slot": "366",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10310,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "wolfsUsed",
        "offset": 0,
        "slot": "367",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 10314,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "materialsUsed",
        "offset": 0,
        "slot": "368",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 10318,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "wolfPackLife",
        "offset": 0,
        "slot": "369",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10322,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "wolfPackEnergy",
        "offset": 0,
        "slot": "370",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10326,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "wolfPackLinkDays",
        "offset": 0,
        "slot": "371",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10330,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "wolfPackLinkDate",
        "offset": 0,
        "slot": "372",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10334,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "lastHunting",
        "offset": 0,
        "slot": "373",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10338,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "configurationLinkDays",
        "offset": 0,
        "slot": "374",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 10340,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "isPromoActive",
        "offset": 0,
        "slot": "375",
        "type": "t_bool"
      },
      {
        "astId": 10344,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "wolfPackInPromo",
        "offset": 0,
        "slot": "376",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 10346,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "dateLastPromoActivation",
        "offset": 0,
        "slot": "377",
        "type": "t_uint256"
      },
      {
        "astId": 10348,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "daysOfPromo",
        "offset": 0,
        "slot": "378",
        "type": "t_uint256"
      },
      {
        "astId": 10350,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "linkCommission",
        "offset": 0,
        "slot": "379",
        "type": "t_uint256"
      },
      {
        "astId": 10352,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "energyCommission",
        "offset": 0,
        "slot": "380",
        "type": "t_uint256"
      },
      {
        "astId": 10354,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "marketPlaceAddress",
        "offset": 0,
        "slot": "381",
        "type": "t_address"
      },
      {
        "astId": 10356,
        "contract": "contracts/WolfPacksNFT.sol:WolfPacksNFT",
        "label": "claimContractAddress",
        "offset": 0,
        "slot": "382",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}